"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[4099],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>N});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),k=m(a),N=l,c=k["".concat(s,".").concat(N)]||k[N]||u[N]||r;return a?n.createElement(c,i(i({ref:t},o),{},{components:a})):n.createElement(c,i({ref:t},o))}));function N(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=k;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},9076:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>m});var n=a(7462),l=(a(7294),a(3905));const r={title:"Data Engineering \uc2a4\ud130\ub514 12\uc8fc\ucc28",date:"2021-11-03",draft:!1,description:"PseudoLab Data Science Fellowship 1\uae30",sidebar_position:1},i="Unit Testing for Data Science in Python",p={unversionedId:"Group-Study/data-engineering/data-engineer-with-python-week-12",id:"Group-Study/data-engineering/data-engineer-with-python-week-12",title:"Data Engineering \uc2a4\ud130\ub514 12\uc8fc\ucc28",description:"PseudoLab Data Science Fellowship 1\uae30",source:"@site/docs/Group-Study/data-engineering/data-engineer-with-python-week-12.md",sourceDirName:"Group-Study/data-engineering",slug:"/Group-Study/data-engineering/data-engineer-with-python-week-12",permalink:"/docs/Group-Study/data-engineering/data-engineer-with-python-week-12",draft:!1,editUrl:"https://github.com/teddygood/teddygood.github.io/docs/Group-Study/data-engineering/data-engineer-with-python-week-12.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Data Engineering \uc2a4\ud130\ub514 12\uc8fc\ucc28",date:"2021-11-03",draft:!1,description:"PseudoLab Data Science Fellowship 1\uae30",sidebar_position:1},sidebar:"sidebar",previous:{title:"Data Engineering \uc2a4\ud130\ub514 10\uc8fc\ucc28",permalink:"/docs/Group-Study/data-engineering/data-engineer-with-python-week-10"},next:{title:"Data Engineering \uc2a4\ud130\ub514 13\uc8fc\ucc28",permalink:"/docs/Group-Study/data-engineering/data-engineer-with-python-week-13"}},s={},m=[{value:"Unit testing basics",id:"unit-testing-basics",level:2},{value:"Unit test",id:"unit-test",level:3},{value:"unit",id:"unit",level:3},{value:"Integration test, End to end test",id:"integration-test-end-to-end-test",level:3},{value:"pytest",id:"pytest",level:3},{value:"Intermediate unit testing",id:"intermediate-unit-testing",level:2},{value:"assert",id:"assert",level:3},{value:"\ub370\uc774\ud130 \ud0c0\uc785\uc774 \ub2ec\ub77c \uc608\uc678\ub97c \ubc1c\uc0dd\ud558\ub294 \uacbd\uc6b0",id:"\ub370\uc774\ud130-\ud0c0\uc785\uc774-\ub2ec\ub77c-\uc608\uc678\ub97c-\ubc1c\uc0dd\ud558\ub294-\uacbd\uc6b0",level:3},{value:"\uc5bc\ub9c8\ub098 \ub9ce\uc740 \ud14c\uc2a4\ud2b8\ub97c \ud574\uc57c \ud560\uae4c?",id:"\uc5bc\ub9c8\ub098-\ub9ce\uc740-\ud14c\uc2a4\ud2b8\ub97c-\ud574\uc57c-\ud560\uae4c",level:3},{value:"Test Driven Development",id:"test-driven-development",level:3},{value:"Test Organization and Execution",id:"test-organization-and-execution",level:2},{value:"\ud14c\uc2a4\ud2b8 \ucf54\ub4dc directory",id:"\ud14c\uc2a4\ud2b8-\ucf54\ub4dc-directory",level:3},{value:"\ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \uc2e4\ud589",id:"\ubaa8\ub4e0-\ud14c\uc2a4\ud2b8-\uc2e4\ud589",level:3},{value:"\uc77c\ubd80\uc758 \ud14c\uc2a4\ud2b8 \uc9c4\ud589",id:"\uc77c\ubd80\uc758-\ud14c\uc2a4\ud2b8-\uc9c4\ud589",level:3},{value:"\uc2e4\ud328 \uc608\uce21, \ud2b9\ubcc4\ud55c \uc870\uac74\uc77c \ub54c \uc0dd\ub7b5",id:"\uc2e4\ud328-\uc608\uce21-\ud2b9\ubcc4\ud55c-\uc870\uac74\uc77c-\ub54c-\uc0dd\ub7b5",level:3},{value:"GitHub badge",id:"github-badge",level:3},{value:"Testing Models, Plots and Much More",id:"testing-models-plots-and-much-more",level:2},{value:"workflow \ubcc0\uacbd",id:"workflow-\ubcc0\uacbd",level:3},{value:"tmpdir",id:"tmpdir",level:3},{value:"fixture chaining",id:"fixture-chaining",level:3},{value:"Mocking",id:"mocking",level:3},{value:"\ubaa8\ub378 \ud14c\uc2a4\ud2b8",id:"\ubaa8\ub378-\ud14c\uc2a4\ud2b8",level:3},{value:"plot \ud14c\uc2a4\ud2b8",id:"plot-\ud14c\uc2a4\ud2b8",level:3}],o={toc:m};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"unit-testing-for-data-science-in-python"},"Unit Testing for Data Science in Python"),(0,l.kt)("h2",{id:"unit-testing-basics"},"Unit testing basics"),(0,l.kt)("h3",{id:"unit-test"},"Unit test"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uac00\uc7a5 \uc27d\uac8c \ucf54\ub4dc\ub97c \ud14c\uc2a4\ud2b8\ud558\ub294 \ubc29\ubc95\uc740 interpreter\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc774\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc2e4\uc81c\ub85c\ub294 \ub9e4\uc6b0 \ube44\ud6a8\uc728\uc801 -> \ubc84\uadf8\ub97c \uc218\uc815\ud558\uac70\ub098 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574 \ud568\uc218\ub97c \uc218\uc815\ud560 \ub54c\ub9c8\ub2e4 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud558\uae30 \ub54c\ubb38\uc774\ub2e4."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"unit test\ub294 \ubc18\ubcf5\uc801\uc73c\ub85c \uc9c4\ud589\ud558\ub294 \ud14c\uc2a4\ud2b8 \uacfc\uc815\uc744 \uc790\ub3d9\ud654\ud55c\ub2e4.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ubb38\uc11c \uc5ed\ud560\uc744 \ud558\uae30\ub3c4 \ud55c\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ubcf4\uace0 \ud568\uc218\uc758 \uc5ed\ud560\uc744 \ucd94\uce21\ud558\uc5ec \ucf54\ub4dc\ub97c \ub354 \ube68\ub9ac \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \ub3c4\uc640\uc900\ub2e4."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"package\uc758 \uc2e0\ub8b0\ub3c4\uac00 \ub192\uc544\uc9c4\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc0ac\uc6a9\uc790\uac00 unit test\ub97c \uc2e4\ud589\ud558\uace0 \uae30\ub2a5\uc774 \uc791\ub3d9\ud558\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uc2dc\uc2a4\ud15c\uc758 downtime\uc744 \uc904\uc77c \uc218 \uc788\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"downtime: \uc2dc\uc2a4\ud15c\uc744 \uc774\uc6a9\ud560 \uc218 \uc5c6\ub294 \uc2dc\uac04"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud30c\uc774\uc36c\uc758 \ub2e4\uc591\ud55c unit test library"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"pytest -> \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \uac00\uc7a5 \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \uc720\ub2db \ud14c\uc2a4\ud2b8 \ub77c\uc774\ube0c\ub7ec\ub9ac"),(0,l.kt)("li",{parentName:"ul"},"unittest -> \ud45c\uc900"),(0,l.kt)("li",{parentName:"ul"},"nosetests"),(0,l.kt)("li",{parentName:"ul"},"doctest")))),(0,l.kt)("h3",{id:"unit"},"unit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc791\uc740 \ucf54\ub4dc \uc870\uac01 "),(0,l.kt)("li",{parentName:"ul"},"Python\uc758 \ud568\uc218 \ub610\ub294 \ud074\ub798\uc2a4")),(0,l.kt)("h3",{id:"integration-test-end-to-end-test"},"Integration test, End to end test"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Integration test(\ud1b5\ud569 \ud14c\uc2a4\ud2b8)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc11c\ub85c \ub2e4\ub978 \uc2dc\uc2a4\ud15c\ub4e4\uc774 \uc0c1\ud638\uc791\uc6a9\uc774 \uc798 \uc774\ub8e8\uc5b4 \uc9c0\ub294\uac00\uc5d0 \ub300\ud574 \ud14c\uc2a4\ud2b8\ud558\ub294 \uac83"))),(0,l.kt)("li",{parentName:"ul"},"End to end test",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc804\uccb4 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \ud55c \ubc88\uc5d0 \ud655\uc778 ")))),(0,l.kt)("h3",{id:"pytest"},"pytest"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"test_"),"\ub97c \ud30c\uc77c \uc774\ub984 \uc55e\uc5d0 \ubd99\uc778\ub2e4. -> naming convention")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"test module")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"assert")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"assert boolean_expression\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"boolean_expression\uc774 ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),"\uba74 AssertionError \ubc1c\uc0dd"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uc608\uc2dc: test_row_to_list.py"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pytest\nimport row_to_list\n\ndef test_for_clean_row():\n    assert row_to_list("2,081\\t314,942\\n") == ["2,081", "314,942"]\n\ndef test_for_missing_area():\n    assert row_to_list("\\t293,410\\n") is None\n\ndef test_for_missing_tab():\n    assert row_to_list("1,463238,765\\n") is None\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"command line\uc5d0\uc11c \uc0ac\uc6a9"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pytest test_row_to_list.py\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"IPython\uc5d0\uc11c \uc0ac\uc6a9 -> ",(0,l.kt)("inlineCode",{parentName:"p"},"!"),"\ub97c \ubd99\uc774\uba74 command line\uc5d0\uc11c \uc2e4\ud589\uc2dc\ud0a8\ub2e4\ub294 \uc758\ubbf8"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"!pytest test_row_to_list.py\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uacb0\uacfc"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"."),": Passed -> No exception raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"F"),": Failure -> An exception is raised."),(0,l.kt)("li",{parentName:"ul"},"\uc2e4\ud328 \ud588\uc744 \ub54c \uc2e4\ud589 \uacb0\uacfc",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">"),": \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ub77c\uc778"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"E"),": \uc608\uc678\uc5d0 \ub300\ud55c \uc138\ubd80 \uc815\ubcf4 \ud3ec\ud568")))))),(0,l.kt)("h2",{id:"intermediate-unit-testing"},"Intermediate unit testing"),(0,l.kt)("h3",{id:"assert"},"assert"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"boolean_expression \uc774\uc678\uc5d0\ub3c4 message\ub77c\ub294 \uc778\uc790\ub97c \ubc1b\uc744 \uc218 \uc788\ub2e4."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'assert 1 == 2, "One is not equal to two!" # AssertionError\n')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc608\uc2dc: test_row_to_list.py \uba54\uc2dc\uc9c0 \ucd94\uac00",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AssertionError:")," \ub2e4\uc74c\uc5d0 \uba54\uc2dc\uc9c0\uac00 \ucd9c\ub825\ub41c\ub2e4.")))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pytest\n...  \ndef test_for_missing_area_with_message():\n    actual = row_to_lsit("\\t293,410\\n")\n    expected = None\n    message = ("row_to_list(\'\\t293,410\\n) "\n                "returned {0} instead "\n                "of {1}".format(actural, excepted)\n                )\n    assert actual is expected, message\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"assert statement\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uba54\uc2dc\uc9c0\ub97c \ud3ec\ud568\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ub514\ubc84\uae45\uacfc \uad00\ub828\ub41c \ubaa8\ub4e0 \ubcc0\uc218 \uac12\uc744 \uc778\uc1c4\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"assert\ubb38\uc5d0\uc11c \ubd80\ub3d9 \uc18c\uc218\uc810\uc744 \ube44\uad50\ud558\ub294 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc740 \uc0ac\uc6a9\ud558\uba74 \uc548 \ub41c\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ubd80\ub3d9 \uc18c\uc218\uc810 \uc624\ucc28")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"0.1 + 0.1 + 0.1 == 0.3 # False\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pytest.approx()"),"\ub97c \uc0ac\uc6a9",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"assert 0.1 + 0.1 + 0.1 == pytest.approx(0.3)\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"NumPy\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"assert np.array([0.1 + 0.1, 0.1 + 0.1 + 0.1]) == pytest.approx(np.array([0.2, 0.3]))\n"))))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud558\ub098 \uc774\uc0c1\uc758 assert\ubb38\uc774 \uc788\uc744 \uc218 \uc788\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub450 \uac1c\uc758 assert \ubb38\uc774 \ubaa8\ub450 \ud1b5\uacfc\ud558\uba74 \ud14c\uc2a4\ud2b8\uac00 \ud1b5\uacfc"),(0,l.kt)("li",{parentName:"ul"},"\ud558\ub098\ub77c\ub3c4 AssertionError\ub97c \uc77c\uc73c\ud0a4\uba74 \uc2e4\ud328")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pytest\n...\n\ndef test_on_string_with_one_comma():\n    return_value = convert_to_int("2,081")\n    assert isinstance(return_value, int)\n    assert return_value == 2081\n')))),(0,l.kt)("h3",{id:"\ub370\uc774\ud130-\ud0c0\uc785\uc774-\ub2ec\ub77c-\uc608\uc678\ub97c-\ubc1c\uc0dd\ud558\ub294-\uacbd\uc6b0"},"\ub370\uc774\ud130 \ud0c0\uc785\uc774 \ub2ec\ub77c \uc608\uc678\ub97c \ubc1c\uc0dd\ud558\ub294 \uacbd\uc6b0"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc77c\ubd80 \ud568\uc218\ub294 \ud2b9\uc815 \ud0c0\uc785\uc758 \uac12\uc774 \uc804\ub2ec\ub418\uc5b4 \ud638\ucd9c\ub420 \ub54c \uc544\ubb34\uac83\ub3c4 \ubc18\ud658\ud558\uc9c0 \uc54a\uace0 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"with"),"\ubb38\uacfc ",(0,l.kt)("inlineCode",{parentName:"li"},"pytest.raises()"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud574\uacb0",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def test_valueerror_on_one_dimensional_argument():\n    example_argument = np.array([2081, 314942, 1059, 186606, 1148, 206186])\n    with pytest.raises(ValueError):\n        split_into_training_and_testing_sets(example_argument)\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ValueError\ub97c \ubc1c\uc0dd \uc2dc\ud0a4\uba74 \ud14c\uc2a4\ud2b8 \ud1b5\uacfc"),(0,l.kt)("li",{parentName:"ul"},"\ud568\uc218\uc5d0 \ubc84\uadf8\uac00 \uc788\uace0 ValueError\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc73c\uba74 context manager\uac00 \uc2e4\ud328 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c \ud14c\uc2a4\ud2b8\uac00 \uc2e4\ud328"))),(0,l.kt)("li",{parentName:"ul"},"\ubc1c\uc0dd\ud55c \uc608\uc678\uc758 \ud14c\uc2a4\ud2b8",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"as\ubb38 \uc0ac\uc6a9")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def test_valueerror_on_one_dimensional_argument():\n    example_argument = np.array([2081, 314942, 1059, 186606, 1148, 206186])\n    with pytest.raises(ValueError) as exception_info: # store the exception\n        split_into_training_and_testing_sets(example_argument)\n    # Check if ValueError contains correct message\n    assert exception_info.match("Argument data array must be two dimensional. "\n                                "Got 1 dimensional array instead!"\n                                )\n')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"context \ub0b4\uc5d0\uc11c ValueError\uac00 \ubc1c\uc0dd\ud558\uba74 exception_info\uc5d0\ub294 ValueError\uc5d0 \ub300\ud55c \uba54\uc2dc\uc9c0\uac00 \ud3ec\ud568\ub41c\ub2e4."),(0,l.kt)("li",{parentName:"ul"},"with\ubb38\uc774 \ub05d\ub098\uba74 match method\ub97c \uc0ac\uc6a9\ud558\uc5ec exception_info\uc5d0 \uba54\uc2dc\uc9c0\uac00 \uc788\ub294\uc9c0 \ud655\uc778")))))),(0,l.kt)("h3",{id:"\uc5bc\ub9c8\ub098-\ub9ce\uc740-\ud14c\uc2a4\ud2b8\ub97c-\ud574\uc57c-\ud560\uae4c"},"\uc5bc\ub9c8\ub098 \ub9ce\uc740 \ud14c\uc2a4\ud2b8\ub97c \ud574\uc57c \ud560\uae4c?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Test argument types",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Bad arguments",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ud568\uc218\uac00 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ub300\uc2e0 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 argument"))),(0,l.kt)("li",{parentName:"ul"},"Special arguments",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Boundary values -> ValueError\uac00 \uc77c\uc5b4\ub098\uae30 \uc804 \ud6c4\uc758 \uacbd\uacc4\uac12"),(0,l.kt)("li",{parentName:"ul"},"some argument values, function uses special logic -> \uc720\ub3d9\uc801\uc778 \uac12, \ube44\uc728 \uac12"))),(0,l.kt)("li",{parentName:"ul"},"Normal arguments -> \uc77c\ubc18\uc801\uc73c\ub85c \uacc4\uc0b0\ub418\ub294 \uac12"))),(0,l.kt)("li",{parentName:"ul"},"\uc704\uc758 argument\ub4e4\uc744 \ud14c\uc2a4\ud2b8 \ud588\ub2e4\uba74, \ud568\uc218\ub294 \uc81c\ub300\ub85c \ud14c\uc2a4\ud2b8\ub41c \uac83\uc774\ub2e4."),(0,l.kt)("li",{parentName:"ul"},"\ubaa8\ub4e0 \ud568\uc218\uac00 bad, special argument\ub97c \uac16\uace0 \uc788\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uadf8\ub807\uae30\uc5d0 \uadf8\ub7f0 \uacbd\uc6b0\uc5d0\ub294 \ud574\ub2f9 argument\ub97c \ud14c\uc2a4\ud2b8\uc5d0 \ud3ec\ud568\uc2dc\ud0a4\uc9c0 \uc54a\uace0 \ubb34\uc2dc\ud574\uc57c \ud55c\ub2e4. ")))),(0,l.kt)("h3",{id:"test-driven-development"},"Test Driven Development"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc2e4\uc81c \ud504\ub85c\uadf8\ub7a8\uc744 \uad6c\ud604\ud574\ubcf4\uba74 unit test \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc744 \uc0dd\ub7b5\ud560 \uc218\ub3c4 \uc788\ub2e4.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uadf8\ub807\uae30\uc5d0 \ud568\uc218\ub97c \uad6c\ud604\ud558\uae30 \uc804\uc5d0 unit test\ub97c \uc791\uc131\ud558\ub294 \ub2e8\uacc4\ub97c \ucd94\uac00\ud55c\ub2e4. -> unit test \uc791\uc131\uc774 \uc5f0\uae30\ub418\uac70\ub098 \uc6b0\uc120 \uc21c\uc704\uac00 \ub0ae\uc544\uc9c0\uc9c0 \uc54a\ub294\ub2e4.")))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\ud14c\uc2a4\ud2b8 \ubaa8\ub4c8\uc5d0\uc11c \ud568\uc218\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \uc791\uc131"),(0,l.kt)("li",{parentName:"ol"},"\ud14c\uc2a4\ud2b8 \ubaa8\ub4c8 \uc2e4\ud589"),(0,l.kt)("li",{parentName:"ol"},"\ud568\uc218\ub97c \uad6c\ud604\ud558\uace0 \ud14c\uc2a4\ud2b8\ub97c \ub2e4\uc2dc \uc2e4\ud589")),(0,l.kt)("h2",{id:"test-organization-and-execution"},"Test Organization and Execution"),(0,l.kt)("h3",{id:"\ud14c\uc2a4\ud2b8-\ucf54\ub4dc-directory"},"\ud14c\uc2a4\ud2b8 \ucf54\ub4dc directory"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uc18c\uc2a4\ucf54\ub4dc\ub97c \ub2f4\uace0 \uc788\ub294 directory\uc640 \ub3d9\uc77c \ub808\ubca8\uc758 directory\ub97c \ub9cc\ub4dc\ub294 \uac83\uc744 \uad8c\uc7a5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ub2f4\uace0 \uc788\ub294 directory\ub97c test suite\ub77c\uace0 \ubd80\ub974\uae30\ub3c4 \ud55c\ub2e4.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"__init__.py"),"\ub97c \uc81c\uc678\ud558\uace0 \uc18c\uc2a4\ucf54\ub4dc directory\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ucf54\ub4dc\ub4e4\uc758 test \ud30c\uc77c\uc744 \ub9cc\ub4e0\ub2e4.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"test module\uc758 \ubb38\uc81c\uc810"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud55c \ud568\uc218\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8\uac00 \uc5b4\ub514\uc11c \ub05d\ub098\uace0 \ub2e4\ub978 \ud568\uc218\uac00 \uc5b4\ub514\uc11c \uc2dc\uc791\ub418\ub294\uc9c0 \uc54c \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc5c6\ub2e4.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud574\uacb0: test class\ub97c \uc0ac\uc6a9"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pytest\nfrom data.preprocessing_helpers import row_to_list, convert_to_int\n\nclass TestRowToList(object): # Always put the argument object\n    def test_on_no_tab_no_missing_value(self): # Always put the argument self\n    ...\n    def test_on_two_tabs_no_missing_value(self): # Always put the argument self\n    ...\n\nclass TestConvertToInt(object): # Test class for convert_to_int()\n    def test_with_no_comma(self): # A test for convert_to_int()\n    ...\n    def test_with_one_comma(self): # Another test for convert_to_int()\n    ...\n")))))),(0,l.kt)("h3",{id:"\ubaa8\ub4e0-\ud14c\uc2a4\ud2b8-\uc2e4\ud589"},"\ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \uc2e4\ud589"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"test \ud3f4\ub354\ub85c \ubcc0\uacbd\ud55c \ud6c4 ",(0,l.kt)("inlineCode",{parentName:"li"},"pytest")," \uc2e4\ud589",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ud3f4\ub354 \ub0b4\ubd80\uc5d0 \uc874\uc7ac\ud558\ub294 ",(0,l.kt)("inlineCode",{parentName:"li"},"test_"),"\ub85c \uc2dc\uc791\ud558\ub294 \ud30c\uc77c \uac80\uc0c9 -> \ud14c\uc2a4\ud2b8 \ubaa8\ub4c8\ub85c \uc778\uc2dd"),(0,l.kt)("li",{parentName:"ul"},"\ud074\ub798\uc2a4\uc758 \uacbd\uc6b0\ub294 CamelCase\ub85c \uc791\uc131\ub418\uae30 \ub54c\ubb38\uc5d0 ",(0,l.kt)("inlineCode",{parentName:"li"},"Test"),"\ub85c \uc2dc\uc791\ud558\ub294 \ud074\ub798\uc2a4 \uc2dd\ubcc4"),(0,l.kt)("li",{parentName:"ul"},"test_\ub85c \uc2dc\uc791\ud558\ub294 function\uc744 unit test\ub85c \uc778\uc2dd"),(0,l.kt)("li",{parentName:"ul"},"unit test\ub4e4\uc744 \ubaa8\ub450 \uc218\uc9d1\ud55c \ud6c4 \uc2e4\ud589\ub41c\ub2e4."),(0,l.kt)("li",{parentName:"ul"},"\uc77c\ubc18\uc801\uc73c\ub85c \uc774 \uba85\ub839\uc5b4\ub294 \ucee4\ubc0b\uc774 \ub418\uace0 repository\uc5d0 push\ub41c \ud6c4 CI(Continuous Integration) server\uc5d0\uc11c \uc2e4\ud589",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc0c8\ub85c\uc6b4 \ucf54\ub4dc \ubcc0\uacbd \uc0ac\ud56d\uc774 \uc815\uae30\uc801\uc73c\ub85c \ube4c\ub4dc \ubc0f \ud14c\uc2a4\ud2b8\ub418\uc5b4 repository\uc5d0 \ud1b5\ud569\ub41c\ub2e4."))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pytest -x"),"\ub97c \uc0ac\uc6a9\ud558\uba74 \ud14c\uc2a4\ud2b8\uac00 \uc2e4\ud328\ud558\uba74 \uc989\uc2dc pytest\ub97c \uc911\uc9c0\uc2dc\ud0a8\ub2e4.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc2dc\uac04\uacfc \uc790\uc6d0 \uc808\uc57d")))),(0,l.kt)("h3",{id:"\uc77c\ubd80\uc758-\ud14c\uc2a4\ud2b8-\uc9c4\ud589"},"\uc77c\ubd80\uc758 \ud14c\uc2a4\ud2b8 \uc9c4\ud589"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ud30c\uc774\uc36c \ud30c\uc77c\uc5d0\ub9cc \ud14c\uc2a4\ud2b8",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pytest data/test_preprocessing_helpers.py\n"))),(0,l.kt)("li",{parentName:"ul"},"Node ID",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"pytest\ub294 \ubc1c\uacac\ub418\ub294 \ubaa8\ub4e0 test class, unit test\uc5d0 Node ID\ub97c \ud560\ub2f9"),(0,l.kt)("li",{parentName:"ul"},"Node ID of a test class: ",(0,l.kt)("inlineCode",{parentName:"li"},"<path to test module>::<test class name>")),(0,l.kt)("li",{parentName:"ul"},"Node ID of an unit test: ",(0,l.kt)("inlineCode",{parentName:"li"},"<path to test module>::<test class name>::<unit test name>")),(0,l.kt)("li",{parentName:"ul"},"\uc608\uc2dc",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pytest data/test_preprocessing_helpers.py::TestRowToList\npytest data/test_preprocessing_helpers.py::TestRowToList::test_on_one_tab_with_missing_value\n"))))),(0,l.kt)("li",{parentName:"ul"},"keyword \uc0ac\uc6a9",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-k"),": \ub530\uc634\ud45c\ub85c \ubb36\uc778 \ubb38\uc790\uc5f4\uc744 \ud3ec\ud568\ud558\ub294 \ucf54\ub4dc \ud14c\uc2a4\ud2b8 \uc9c4\ud589",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pytest -k "TestSplitIntoTrainingAndTestingSets"\npytest -k "TestSplit"\n')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub17c\ub9ac \uc5f0\uc0b0\uc790\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pytest -k "TestSplit and not test_on_one_row"\n')))))))),(0,l.kt)("h3",{id:"\uc2e4\ud328-\uc608\uce21-\ud2b9\ubcc4\ud55c-\uc870\uac74\uc77c-\ub54c-\uc0dd\ub7b5"},"\uc2e4\ud328 \uc608\uce21, \ud2b9\ubcc4\ud55c \uc870\uac74\uc77c \ub54c \uc0dd\ub7b5"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud6c8\ub828 \ub370\uc774\ud130\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c \ubaa8\ub378\uc744 \ubc18\ud658\ud558\ub294 \uc0c8\ub85c\uc6b4 \ud568\uc218\uc778 train_model()\uc744 \uad6c\ud604\ud55c\ub2e4\uace0 \uac00\uc815"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"TDD -> Test code\ubd80\ud130 \uc791\uc131 "),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pytest\n\nclass TestTrainModel(object):\n    def test_on_linear_data(self):\n...\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"test code\ub97c \uc791\uc131\ud588\uc9c0\ub9cc \uad6c\ud604\uc774 \ub418\uc5b4 \uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 CI \uc11c\ubc84\uac00 \ud14c\uc2a4\ud2b8 \uc2e4\ud328 \uacbd\uace0\ub97c \ubcf4\ub0b8\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uc2e4\ud328\ud560 \uacf3\uc744 \uc5d0\uce21\ud558\uc5ec ",(0,l.kt)("inlineCode",{parentName:"p"},"@pytest.mark.xfail"),"\uc744 \uc0ac\uc6a9 -> \ud14c\uc2a4\ud2b8\uac00 \uc5b4\uc9dc\ud53c \ud2c0\ub9b4 \uac83\uc784\uc744 \ubbf8\ub9ac \uc54c\ub824\uc904 \uc218 \uc788\ub2e4."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub370\ucf54\ub808\uc774\ud130\ub294 \ud074\ub798\uc2a4 \uc804\uccb4\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc801\uc6a9\ud560 \uc218 \uc788\ub2e4."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@pytest.mark.skipif"),"\ucc98\ub7fc reason\uc73c\ub85c \uc774\uc720\ub97c \ud45c\uae30\ud560 \uc218\ub3c4 \uc788\ub2e4.")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'@pytest.mark.xfail(reason="\u201cUsing TDD, train_model() is not implemented")\n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pytest\n\nclass TestTrainModel(object):\n    @pytest.mark.xfail\n    def test_on_linear_data(self):\n  ...\n"))))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud2b9\uc815 \uc870\uac74\uc5d0\uc11c \ud14c\uc2a4\ud2b8\uac00 \uc2e4\ud328\ud558\ub294 \uacbd\uc6b0"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud2b9\uc815 Python \ubc84\uc804 \ub610\ub294 \ud2b9\uc815 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \uc77c\ubd80 \uae30\ub2a5\ub4e4\uc774 \uc791\ub3d9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class TestConvertToInt(object):\n    def test_with_no_comma(self):\n        """Only runs on Python 2.7 or lower"""\n        test_argument = "756"\n        expected = 756\n        actual = convert_to_int(test_argument)\n        message = unicode("Expected: 2081, Actual: {0}".format(actual)) # Requires Python 2.7 or lower\n        assert actual == expected, message\n')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@pytest.mark.skipif"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\uacb0"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"bolean_expression \uc0ac\uc6a9 -> True\uc774\uba74 \ud14c\uc2a4\ud2b8\ub97c \uc2a4\ud0b5")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import sys\n\nclass TestConvertToInt(object):\n    @pytest.mark.skipif(sys.version_info > (2, 7), reason="requires Python 2.7")\n    def test_with_no_comma(self):\n        """Only runs on Python 2.7 or lower"""\n        test_argument = "756"\n        expected = 756\n        actual = convert_to_int(test_argument)\n        message = unicode("Expected: 2081, Actual: {0}".format(actual)) # Requires Python 2.7 or lower\n        assert actual == expected, message\n'))))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ud14c\uc2a4\ud2b8 \uacb0\uacfc\uc5d0\uc11c \uc774\uc720\ub97c \uc54c\uace0 \uc2f6\uc744 \ub54c ",(0,l.kt)("inlineCode",{parentName:"p"},"-r")," \uc0ac\uc6a9"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-r")," \ub4a4\uc5d0\ub294 \ub2e4\ub978 \ubb38\uc790\uac00 \ubd99\uc744 \uc218 \uc788\ub2e4.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rs"),": \uc2a4\ud0b5\ud55c \ud14c\uc2a4\ud2b8 \ud45c\uc2dc"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rx"),": \uc774\uc720\uc640 \ud568\uaed8 xfail\ud55c \ud14c\uc2a4\ud2b8\ub9cc \ucd9c\ub825"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-rsx"),"\ub85c \uc704\uc758 \ub450 \uacb0\uacfc\ub97c \ubaa8\ub450 \ud655\uc778\ud560 \uc218\ub3c4 \uc788\ub2e4.")))))),(0,l.kt)("h3",{id:"github-badge"},"GitHub badge"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"CI \uc11c\ubc84 \uc0ac\uc6a9 -> commit\ud558\uace0 push\ud560 \ub54c\ub9c8\ub2e4 \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Travis CI")," \uc0ac\uc6a9",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"configuration \ud30c\uc77c ->. ",(0,l.kt)("inlineCode",{parentName:"li"},".travis.yml"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'language: python\npython:\n  - "3.6"\ninstall:\n  - pip install -e .\nscript:\n  - pytest tests\n'))))),(0,l.kt)("li",{parentName:"ul"},"GitHub\uc5d0 push",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git add .travis.yml\ngit push origin master\n"))),(0,l.kt)("li",{parentName:"ul"},"Marketplace\uc5d0\uc11c Travis CI \uc124\uce58 -> \uc811\uadfc \ud5c8\uc6a9 "),(0,l.kt)("li",{parentName:"ul"},"CI \ud654\uba74\uc73c\ub85c \ub4e4\uc5b4\uac00\uc11c badge \ud074\ub9ad -> \ub9c8\ud06c\ub2e4\uc6b4 \uc120\ud0dd"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Code coverage "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"test suite\ub97c \uc2e4\ud589\ud560 \ub54c \uc2e4\ud589\ub418\ub294 application code\uc758 \ube44\uc728"),(0,l.kt)("li",{parentName:"ul"},"\ud37c\uc13c\ud2b8\uac00 \ub192\uc744\uc218\ub85d \ud14c\uc2a4\ud2b8\uac00 \uc798 \ub41c \ucf54\ub4dc"),(0,l.kt)("li",{parentName:"ul"},"Codecov\ub77c\ub294 \uc11c\ube44\uc2a4\uc5d0\uc11c \uc81c\uacf5",(0,l.kt)("div",{parentName:"li",className:"math math-display"},(0,l.kt)("span",{parentName:"div",className:"katex-display"},(0,l.kt)("span",{parentName:"span",className:"katex"},(0,l.kt)("span",{parentName:"span",className:"katex-mathml"},(0,l.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,l.kt)("semantics",{parentName:"math"},(0,l.kt)("mrow",{parentName:"semantics"},(0,l.kt)("mtext",{parentName:"mrow"},"\xa0code\xa0coverage\xa0"),(0,l.kt)("mo",{parentName:"mrow"},"="),(0,l.kt)("mfrac",{parentName:"mrow"},(0,l.kt)("mtext",{parentName:"mfrac"},"\xa0num\xa0lines\xa0of\xa0application\xa0code\xa0that\xa0ran\xa0during\xa0testing\xa0"),(0,l.kt)("mtext",{parentName:"mfrac"},"\xa0total\xa0num\xa0lines\xa0of\xa0application\xa0code\xa0")),(0,l.kt)("mo",{parentName:"mrow"},"\xd7"),(0,l.kt)("mn",{parentName:"mrow"},"100")),(0,l.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\text { code coverage }=\\frac{\\text { num lines of application code that ran during testing }}{\\text { total num lines of application code }} \\times 100")))),(0,l.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,l.kt)("span",{parentName:"span",className:"mord text"},(0,l.kt)("span",{parentName:"span",className:"mord"},"\xa0code\xa0coverage\xa0")),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,l.kt)("span",{parentName:"span",className:"mrel"},"="),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"2.2519em",verticalAlign:"-0.8804em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},(0,l.kt)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,l.kt)("span",{parentName:"span",className:"mfrac"},(0,l.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,l.kt)("span",{parentName:"span",className:"vlist-r"},(0,l.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.3714em"}},(0,l.kt)("span",{parentName:"span",style:{top:"-2.314em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},(0,l.kt)("span",{parentName:"span",className:"mord text"},(0,l.kt)("span",{parentName:"span",className:"mord"},"\xa0total\xa0num\xa0lines\xa0of\xa0application\xa0code\xa0")))),(0,l.kt)("span",{parentName:"span",style:{top:"-3.23em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,l.kt)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,l.kt)("span",{parentName:"span",style:{top:"-3.677em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},(0,l.kt)("span",{parentName:"span",className:"mord text"},(0,l.kt)("span",{parentName:"span",className:"mord"},"\xa0num\xa0lines\xa0of\xa0application\xa0code\xa0that\xa0ran\xa0during\xa0testing\xa0"))))),(0,l.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,l.kt)("span",{parentName:"span",className:"vlist-r"},(0,l.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8804em"}},(0,l.kt)("span",{parentName:"span"}))))),(0,l.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},"100"))))))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"badge \ub9cc\ub4e4\uae30"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"configuration \ud30c\uc77c ->. ",(0,l.kt)("inlineCode",{parentName:"li"},".travis.yml"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'language: python\npython:\n  - "3.6"\ninstall:\n  - pip install -e .\n  - pip install pytest-cov codecov # Install packages for code coverage report\nscript:\n  - pytest --cov=src tests # Point to the source directory\nafter_success:\n  - codecov # uploads report to codecov.io\n'))),(0,l.kt)("li",{parentName:"ul"},"GitHub\uc5d0 Codecov \uc124\uce58 -> \uc124\uc815\uc73c\ub85c \ub4e4\uc5b4\uac00 \ub9c8\ud06c\ub2e4\uc6b4 \ucf54\ub4dc\ub97c README \ubb38\uc11c\uc5d0 \ubd99\uc5ec\ub123\uae30 ")))),(0,l.kt)("h2",{id:"testing-models-plots-and-much-more"},"Testing Models, Plots and Much More"),(0,l.kt)("h3",{id:"workflow-\ubcc0\uacbd"},"workflow \ubcc0\uacbd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Old workflow"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"assert"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"New workflow"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"setup -> assert -> teardown"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Fixture"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pytest\n\n@pytest.fixture\ndef my_fixture():\n  # Do setup here\n  yield data # Use yield instead of return\n  # Do teardown here\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def test_something(my_fixture):\n    ...\n    data = my_fixture\n    ...\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uc608\uc2dc"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'@pytest.fixture\ndef raw_and_clean_data_file():\n    # setup\n    raw_data_file_path = "raw.txt"\n    clean_data_file_path = "clean.txt"\n    with open(raw_data_file_path, "w") as f:\n        f.write("1,801\\t201,411\\n"\n                "1,767565,112\\n"\n                "2,002\\t333,209\\n"\n                "1990\\t782,911\\n"\n                "1,285\\t389129\\n"\n                )\n    yield raw_data_file_path, clean_data_file_path\n    # teardown\n    os.remove(raw_data_file_path)\n    os.remove(clean_data_file_path)\n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport pytest\n\ndef test_on_raw_data(raw_and_clean_data_file):\n    raw_path, clean_path = raw_and_clean_data_file\n    preprocess(raw_path, clean_path)\n    # assert\n    with open(clean_data_file_path) as f:\n        lines = f.readlines()\n    first_line = lines[0]\n    assert first_line == "1801\\t201411\\n"\n    second_line = lines[1]\n    assert second_line == "2002\\t333209\\n"\n')))),(0,l.kt)("h3",{id:"tmpdir"},"tmpdir"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pytest\uc5d0 built-in \ub418\uc5b4 \uc788\ub294 fixture"),(0,l.kt)("li",{parentName:"ul"},"setup \uc911\uc5d0 \uc784\uc2dc directory \uc124\uc815\ud558\uace0 teardown\ub420 \ub54c \uc784\uc2dc directory \uc0ad\uc81c")),(0,l.kt)("h3",{id:"fixture-chaining"},"fixture chaining"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"tmpdir fixture\ub97c argument\ub85c \uc804\ub2ec\ud558\ub294 \uac83"),(0,l.kt)("li",{parentName:"ul"},"setup of ",(0,l.kt)("inlineCode",{parentName:"li"},"tmdir()")," -> setup of ",(0,l.kt)("inlineCode",{parentName:"li"},"raw_and_clean_data_file()")," -> test -> teardown of ",(0,l.kt)("inlineCode",{parentName:"li"},"raw_and_clean_data_file()")," -> teardown of ",(0,l.kt)("inlineCode",{parentName:"li"},"tmpdir()"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'@pytest.fixture\ndef raw_and_clean_data_file(tmpdir):\n    raw_data_file_path = tmpdir.join("raw.txt")\n    clean_data_file_path = tmpdir.join("clean.txt")\n    with open(raw_data_file_path, "w") as f:\n        f.write("1,801\\t201,411\\n"\n                "1,767565,112\\n"\n                "2,002\\t333,209\\n"\n                "1990\\t782,911\\n"\n                "1,285\\t389129\\n"\n                )\n    yield raw_data_file_path, clean_data_file_path\n    # No teardown code necessary\n')),(0,l.kt)("h3",{id:"mocking"},"Mocking"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uc758\uc874\uc131\uacfc \ub3c5\ub9bd\uc801\uc73c\ub85c \ud568\uc218\ub97c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\ub294 \ubc29\ubc95")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"pytest-momck"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pytest-mock\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"unittest.mock"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Python standard library package"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\ubc84\uadf8\uac00 \uc788\ub294 \uc758\uc874\uc131\uc744 ",(0,l.kt)("inlineCode",{parentName:"p"},"unittest.mock.MagicMock()")," \uac1d\uccb4\ub85c \ubc14\uafb8\ub294 \uac83"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ud14c\uc2a4\ud2b8 \uc911\uc5d0\ub9cc \uac00\ub2a5"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mocker"),"\ub77c\ub294 fixture \uc0ac\uc6a9"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"mocker.patch()"),"\ub294 \ubc18\ud658\ub41c MagicMock() \uac1d\uccb4\uc758 attribute\ub85c \uc778\uc2dd\ud558\uc9c0 \ubabb\ud558\ub294 \ud0a4\uc6cc\ub4dc \uc778\uc218\ub97c \ucc98\ub9ac\ud558\uace0 \uadf8\uc5d0 \ub530\ub77c attribute \uac12\uc744  \uc124\uc815 "),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'mocker.patch("<dependency name with module name>")\n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def test_on_raw_data(raw_and_clean_data_file, mocker):\n    raw_path, clean_path = raw_and_clean_data_file\n    row_to_list_mock = mocker.patch("data.preprocessing_helpers.row_to_list",\n                                    side_effect = row_to_list_bug_free)\n    # row_to_list_mock.side_effect = row_to_list_bug_free \n')),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def row_to_list_bug_free(row):\n    return_values = {\n    "1,801\\t201,411\\n": ["1,801", "201,411"],\n    "1,767565,112\\n": None,\n    "2,002\\t333,209\\n": ["2,002", "333,209"],\n    "1990\\t782,911\\n": ["1990", "782,911"],\n    "1,285\\t389129\\n": ["1,285", "389129"],\n    }\n  return return_values[row]\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"call_args_list")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"mock\uac00 \ud638\ucd9c\ub41c argument\uc758 list \ubc18\ud658 ")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def test_on_raw_data(raw_and_clean_data_file, mocker):\n    raw_path, clean_path = raw_and_clean_data_file\n    row_to_list_mock = mocker.patch("data.preprocessing_helpers.row_to_list",\n                                    side_effect = row_to_list_bug_free)\n    preprocess(raw_path, clean_path)\n    assert row_to_list_mock.call_args_list == [\n    call("1,801\\t201,411\\n"),\n    call("1,767565,112\\n"),\n    call("2,002\\t333,209\\n"), call("1990\\t782,911\\n"),\n    call("1,285\\t389129\\n")\n    ]\n')))),(0,l.kt)("h3",{id:"\ubaa8\ub378-\ud14c\uc2a4\ud2b8"},"\ubaa8\ub378 \ud14c\uc2a4\ud2b8"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc608\uc0c1 \uacb0\uacfc\uac12\uc744 \ubaa8\ub974\uba74 \ud568\uc218\ub97c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc5c6\ub2e4.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uacc4\uc0b0\ud558\uae30 \uc27d\uac70\ub098 \uc798 \uc54c\ub824\uc9c4 training set\uc744 \uc0ac\uc6a9"),(0,l.kt)("li",{parentName:"ul"},"\uc608\uce21\ud558\uc9c0 \ubabb\ud55c\ub2e4\uba74 \ud655\uc2e4\ud55c \uc0ac\uc2e4\uc744 \uc774\uc6a9 -> sanity check",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uacf5\uc2dd\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc218\ud589 \uc804\uc5d0 \ubcc0\uacbd\ub41c \ubd80\ubd84\uc5d0 \ub300\ud574 \ube60\ub974\uac8c \ud655\uc778")))))),(0,l.kt)("h3",{id:"plot-\ud14c\uc2a4\ud2b8"},"plot \ud14c\uc2a4\ud2b8"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"matplotlib\uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c plot \ud14c\uc2a4\ud2b8"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"matplotlib.figure.Figure()"),"\uc5d0\ub294 \uc18d\uc131 \uc218\uac00 \ub9ce\uae30 \ub54c\ubb38\uc5d0 \uac01\uac01 \uac1c\ubcc4\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8\ud558\ub294 \uac83\uc740 \uc88b\uc9c0 \uc54a\ub2e4. ")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\uc77c\ud68c\uc131\uc73c\ub85c \uba3c\uc800 \uae30\uc900\uc120\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 plot fucntion\uc5d0 test argument\ub97c \uacb0\uc815"),(0,l.kt)("li",{parentName:"ol"},"test argument\ub97c \uc0ac\uc6a9\ud558\uc5ec plot fucntion\uc744 \ud638\ucd9c\ud558\uace0 \ubc18\ud658\ub41c matplotlib.figure.Figure() \uac1d\uccb4\ub97c PNG \ud30c\uc77c\ub85c \ubcc0\ud658"),(0,l.kt)("li",{parentName:"ol"},"\ub208\uc73c\ub85c \uc9c1\uc811 \uac80\uc0ac\ud558\uace0 \uc608\uc0c1\ub418\ub85c \ud45c\uc2dc\ub418\ub294\uc9c0 \ud655\uc778"),(0,l.kt)("li",{parentName:"ol"},"\uc774\ubbf8\uc9c0\ub85c \uc800\uc7a5\ud558\uace0 \uae30\uc900 \uc774\ubbf8\uc9c0\ub85c \uc9c0\uc815, \uc608\uc0c1\ub300\ub85c \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc73c\uba74 \ub420 \ub420 \ub54c\uae4c\uc9c0 function \uc218\uc815\ud558\uba74\uc11c \ubc18\ubcf5")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"pytest-mpl")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pytest-mpl\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\uc608\uc2dc"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pytest\nimport numpy as np\nfrom visualization import get_plot_for_best_fit_line\n\n@pytest.mark.mpl_image_compare # Under the hood baseline generation and comparison\ndef test_plot_for_linear_data():\n    slope = 2.0\n    intercept = 1.0\n    x_array = np.array([1.0, 2.0, 3.0]) # Linear data set\n    y_array = np.array([3.0, 5.0, 7.0])\n    title = "Test plot for linear data"\n    return get_plot_for_best_fit_line(slope, intercept, x_array, y_array, title)\n')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"generate baseline image",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pytest -k "test_plot_for_linear_data"\n        --mpl-generate-path\n        visualization/baseline\n'))),(0,l.kt)("li",{parentName:"ul"},"verify the baseline image"),(0,l.kt)("li",{parentName:"ul"},"pytest\uac00 baseline \uc774\ubbf8\uc9c0\ub97c \uc2e4\uc81c \uc774\ubbf8\uc9c0\uc640 \ube44\uad50",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub3d9\uc77c\ud558\uba74 \ud14c\uc2a4\ud2b8 \ud1b5\uacfc, \ub3d9\uc77c\ud558\uc9c0 \uc54a\uc73c\uba74 \ud14c\uc2a4\ud2b8\uac00 \uc2e4\ud328\ud558\uace0 pytest\ub294 \uae30\uc900 \uc774\ubbf8\uc9c0\ub97c \uc800\uc7a5")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pytest -k "test_plot_for_linear_data" --mpl\n')))))))))}u.isMDXComponent=!0}}]);