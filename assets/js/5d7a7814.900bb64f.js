"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[5338],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>k});var n=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=n.createContext({}),s=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},u=function(e){var a=s(e.components);return n.createElement(o.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(t),k=l,c=m["".concat(o,".").concat(k)]||m[k]||d[k]||r;return t?n.createElement(c,i(i({ref:a},u),{},{components:t})):n.createElement(c,i({ref:a},u))}));function k(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=m;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var s=2;s<r;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4406:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=t(7462),l=(t(7294),t(3905));const r={title:"Data Engineering \uc2a4\ud130\ub514 3\uc8fc\ucc28",date:"2021-09-05",tags:["Data Engineering"],draft:!1,description:"PseudoLab Data Science Fellowship 1\uae30",sidebar_position:1},i="Streamlined Data Ingestion with pandas",p={unversionedId:"Study/data-engineering/data-engineer-with-python-week-03",id:"Study/data-engineering/data-engineer-with-python-week-03",title:"Data Engineering \uc2a4\ud130\ub514 3\uc8fc\ucc28",description:"PseudoLab Data Science Fellowship 1\uae30",source:"@site/docs/Study/data-engineering/data-engineer-with-python-week-03.md",sourceDirName:"Study/data-engineering",slug:"/Study/data-engineering/data-engineer-with-python-week-03",permalink:"/docs/Study/data-engineering/data-engineer-with-python-week-03",draft:!1,editUrl:"https://github.com/teddygood/teddygood.github.io/docs/Study/data-engineering/data-engineer-with-python-week-03.md",tags:[{label:"Data Engineering",permalink:"/docs/tags/data-engineering"}],version:"current",sidebarPosition:1,frontMatter:{title:"Data Engineering \uc2a4\ud130\ub514 3\uc8fc\ucc28",date:"2021-09-05",tags:["Data Engineering"],draft:!1,description:"PseudoLab Data Science Fellowship 1\uae30",sidebar_position:1},sidebar:"sidebar",previous:{title:"Data Engineering \uc2a4\ud130\ub514 2\uc8fc\ucc28",permalink:"/docs/Study/data-engineering/data-engineer-with-python-week-02"},next:{title:"Data Engineering \uc2a4\ud130\ub514 4\uc8fc\ucc28",permalink:"/docs/Study/data-engineering/data-engineer-with-python-week-04"}},o={},s=[{value:"Importing Data from Flat Files",id:"importing-data-from-flat-files",level:2},{value:"pandas",id:"pandas",level:3},{value:"DataFrame",id:"dataframe",level:3},{value:"Flat file",id:"flat-file",level:3},{value:"Limiting column",id:"limiting-column",level:3},{value:"Limiting row",id:"limiting-row",level:3},{value:"Assigning column name",id:"assigning-column-name",level:3},{value:"\ud754\ud55c Flat file \uc774\uc288",id:"\ud754\ud55c-flat-file-\uc774\uc288",level:3},{value:"\ub370\uc774\ud130 \ud0c0\uc785 \uc9c0\uc815",id:"\ub370\uc774\ud130-\ud0c0\uc785-\uc9c0\uc815",level:3},{value:"missing data",id:"missing-data",level:3},{value:"Error handling",id:"error-handling",level:3},{value:"Importing Data From Excel Files",id:"importing-data-from-excel-files",level:2},{value:"data wrangling",id:"data-wrangling",level:3},{value:"Spreadsheet",id:"spreadsheet",level:3},{value:"single sheet",id:"single-sheet",level:3},{value:"all sheet",id:"all-sheet",level:3},{value:"\uc9c0\uae08\uae4c\uc9c0 \ud55c \uac83\ub4e4 \uc804\ubd80 \uc0ac\uc6a9\ud574\ubcf4\uae30",id:"\uc9c0\uae08\uae4c\uc9c0-\ud55c-\uac83\ub4e4-\uc804\ubd80-\uc0ac\uc6a9\ud574\ubcf4\uae30",level:3},{value:"pandas\uc5d0\uc11c boolean type \ucc98\ub9ac",id:"pandas\uc5d0\uc11c-boolean-type-\ucc98\ub9ac",level:3},{value:"boolean\uc73c\ub85c casting\ud558\uc5ec \uc0ac\uc6a9\ud560 \ub54c \uace0\ub824\ud560 \uc810",id:"boolean\uc73c\ub85c-casting\ud558\uc5ec-\uc0ac\uc6a9\ud560-\ub54c-\uace0\ub824\ud560-\uc810",level:3},{value:"datetime",id:"datetime",level:3},{value:"pandas datetime",id:"pandas-datetime",level:3},{value:"Non-standard date",id:"non-standard-date",level:3},{value:"Datetime format",id:"datetime-format",level:3},{value:"parsing non-standard date",id:"parsing-non-standard-date",level:3},{value:"Importing Data from Databases",id:"importing-data-from-databases",level:2},{value:"Relational Database",id:"relational-database",level:3},{value:"\ub370\uc774\ud130 \uc77d\uae30",id:"\ub370\uc774\ud130-\uc77d\uae30",level:3},{value:"SQLAlchemy",id:"sqlalchemy",level:3},{value:"Querying DB",id:"querying-db",level:3},{value:"SELECT",id:"select",level:3},{value:"pandas, sqlalchemy \uc0ac\uc6a9",id:"pandas-sqlalchemy-\uc0ac\uc6a9",level:3},{value:"WHERE \ubb38",id:"where-\ubb38",level:3},{value:"DISTINCT",id:"distinct",level:3},{value:"Aggregate Functions",id:"aggregate-functions",level:3},{value:"GROUP BY",id:"group-by",level:3},{value:"Key",id:"key",level:3},{value:"Join",id:"join",level:3},{value:"Importing JSON Data and Working with APIs",id:"importing-json-data-and-working-with-apis",level:2},{value:"JSON",id:"json",level:3},{value:"Record orientation",id:"record-orientation",level:3},{value:"Column orientation",id:"column-orientation",level:3},{value:"split",id:"split",level:3},{value:"API",id:"api",level:3},{value:"Requests",id:"requests",level:3},{value:"Nested JSON",id:"nested-json",level:3},{value:"Append",id:"append",level:3},{value:"Merging",id:"merging",level:3}],u={toc:s};function d(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"streamlined-data-ingestion-with-pandas"},"Streamlined Data Ingestion with pandas"),(0,l.kt)("h2",{id:"importing-data-from-flat-files"},"Importing Data from Flat Files"),(0,l.kt)("h3",{id:"pandas"},"pandas"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Wes Mckinney\uac00 2008\ub144\uc5d0 \uac1c\ubc1c"),(0,l.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uace0 \uc815\ub9ac\ud558\ub294 \ub370 \ucd5c\uc801\ud654\ub41c \ub3c4\uad6c"),(0,l.kt)("li",{parentName:"ul"},"\uc624\ud508\uc18c\uc2a4")),(0,l.kt)("h3",{id:"dataframe"},"DataFrame"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"2\ucc28\uc6d0 \ub370\uc774\ud130 \uad6c\uc870"),(0,l.kt)("li",{parentName:"ul"},"row(index), column")),(0,l.kt)("h3",{id:"flat-file"},"Flat file"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uac04\ub2e8\ud574\uc11c \ub370\uc774\ud130 \uc800\uc7a5 \ubc0f \uacf5\uc720\uc5d0 \uc0ac\uc6a9"),(0,l.kt)("li",{parentName:"ul"},"RDBMS, spreadsheet application\uc5d0\uc11c export\ud560 \uc218 \uc788\uc74c"),(0,l.kt)("li",{parentName:"ul"},"\uc77c\ubc18\uc801\uc778 \ud14d\uc2a4\ud2b8\ub85c \uc800\uc7a5"),(0,l.kt)("li",{parentName:"ul"},"CSV(comma-separated values)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uac00\uc7a5 \ud754\ud55c flat file type"),(0,l.kt)("li",{parentName:"ul"},"\uc27c\ud45c\ub85c \uad6c\ubd84\ub41c \ud14d\uc2a4\ud2b8 \ud30c\uc77c"),(0,l.kt)("li",{parentName:"ul"},"\uc27c\ud45c\ub85c column \uad6c\ubd84 \uac1c\ud589\uc73c\ub85c row \uad6c\ubd84"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pandas"),"\uc5d0\uc11c ",(0,l.kt)("inlineCode",{parentName:"li"},"read_csv()"),"\ub85c \uc77d\uc74c"))),(0,l.kt)("li",{parentName:"ul"},"us_tax_data_2016.csv \uc77d\uc5b4\ubcf4\uae30")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pandas as pd\n\ntax_data = pd.read_csv("us_tax_data_2016.csv")\ntax_data.head(4)  \n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"delimiter(\uad6c\ubd84\ubb38\uc790)\ub85c \ubb38\uc790 \uad6c\ubd84",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"read_csv\ub97c \uc0ac\uc6a9\ud558\uc9c0\ub9cc ",(0,l.kt)("inlineCode",{parentName:"li"},"sep")," argument\ub97c \uc0ac\uc6a9\ud558\uc5ec delimiter \uc124\uc815 \uac00\ub2a5 "))),(0,l.kt)("li",{parentName:"ul"},"tab\uc73c\ub85c \uad6c\ubd84 ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pandas as pd\n\ntax_data = pd.read__csv("us_tax_data_2016.csv", sep="\\t")\ntax_data.head(4)  \n')),(0,l.kt)("h3",{id:"limiting-column"},"Limiting column"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"usecols"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc5f4\uc744 \uc120\ud0dd",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uac00\uc838\uc62c \ubaa8\ub4e0 \uc5f4 \uc774\ub984 \ub610\ub294 \ubaa8\ub4e0 \uc5f4 \ubc88\ud638"))),(0,l.kt)("li",{parentName:"ul"},"column \uc774\ub984, column number\ub97c \uc120\ud0dd\ud558\uc5ec \uac00\uc838\uc628 \ub370\uc774\ud130 \ube44\uad50")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"col_names = ['STATEFIPS', 'STATE', 'zipcode', 'agi_stub', 'N1']\ncol_nums = [0, 1, 2, 3, 4]\n# Choose columns to load by name\ntax_data_v1 = pd.read_csv('us_tax_data_2016.csv',\n                          usecols=col_names)\n# Choose columns to load by number\ntax_data_v2 = pd.read_csv('us_tax_data_2016.csv',\n                          usecols=col_nums)\nprint(tax_data_v1.equals(tax_data_v2)) # true\n")),(0,l.kt)("h3",{id:"limiting-row"},"Limiting row"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nrows"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec load\ud560 \ub54c \ud589 \uc218 \uc904\uc774\uae30"),(0,l.kt)("li",{parentName:"ul"},"\ud30c\uc77c\uc744 \uccad\ud06c \ub2e8\uc704\ub85c \ucc98\ub9ac\ud558\uae30 \uc704\ud574 ",(0,l.kt)("inlineCode",{parentName:"li"},"skiprows"),"\uc640 \uac19\uc774 \uc0ac\uc6a9",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ucc98\uc74c \uba87 \uc904\uc744 skip \ud560 \uac74\uc9c0 \uc124\uc815"),(0,l.kt)("li",{parentName:"ul"},"skip\ud558\ub824\ub294 \ud589\uc758 \ubc88\ud638\ub97c \ub2f4\uc740 \ub9ac\uc2a4\ud2b8\ub85c \uc124\uc815 \uac00\ub2a5"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header"),"\ub294 \uc5f4 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ub420 \ud589\uc758 \ubc88\ud638(\uae30\ubcf8\uac12 0)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"header\uac00 \uc5c6\uace0 \uccab \ud589\ubd80\ud130 \ub370\uc774\ud130\uac00 \uc788\uc73c\uba74 None\uc73c\ub85c \uc9c0\uc815 \uac00\ub2a5 ")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"tax_data_next500 = pd.read_csv('us_tax_data_2016.csv',\n                              nrows=500,\n                              skiprows=1000,\n                              header=None) \nprint(tax_data_next500.head(1)) # \ud655\uc778\ud574\ubcf4\uba74 column name\uc774 \uc5c6\uc74c\n")),(0,l.kt)("h3",{id:"assigning-column-name"},"Assigning column name"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"names"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc5f4 \uc774\ub984 \uc9c0\uc815",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ubb38\uc790\uc5f4 \ub9ac\uc2a4\ud2b8\ub97c \uc0ac\uc6a9"),(0,l.kt)("li",{parentName:"ul"},"\ub9ac\uc2a4\ud2b8\uc5d0\ub294 \ubaa8\ub4e0 \uc5f4\uc5d0 \ub300\ud55c \uc774\ub984\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4."),(0,l.kt)("li",{parentName:"ul"},"\uc77c\ubd80 \uc5f4\uc758 \uc774\ub984\uc744 \uc218\uc815\ud558\uace0 \uc2f6\uc73c\uba74 \ubd88\ub7ec\uc628 \ud6c4\uc5d0 \uc218\uc815\ud574\uc57c \ud55c\ub2e4.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"col_names = list(tax_data_first1000)\ntax_data_next500 = pd.read_csv('us_tax_data_2016.csv',\n                                nrows=500,\n                                skiprows=1000,\n                                header=None,\n                                names=col_names)\nprint(tax_data_next500.head(1))\n")),(0,l.kt)("h3",{id:"\ud754\ud55c-flat-file-\uc774\uc288"},"\ud754\ud55c Flat file \uc774\uc288"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"column data \ud0c0\uc785\uc774 \uc798\ubabb\ub428"),(0,l.kt)("li",{parentName:"ul"},"\uac12\uc774 \uc5c6\uc74c"),(0,l.kt)("li",{parentName:"ul"},"pandas\uc5d0\uc11c \uc77d\uc9c0 \ubabb\ud558\ub294 record")),(0,l.kt)("h3",{id:"\ub370\uc774\ud130-\ud0c0\uc785-\uc9c0\uc815"},"\ub370\uc774\ud130 \ud0c0\uc785 \uc9c0\uc815"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pandas\ub294 \ub370\uc774\ud130\ub97c \uac00\uc838\uc62c \ub54c \ub370\uc774\ud130\ub97c \uc790\ub3d9\uc73c\ub85c \uc720\ucd94\ud558\uc5ec \uac00\uc838\uc634",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uac00\ub054 \ud2c0\ub9ac\uae30\ub3c4 \ud568"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dtype")),(0,l.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\ud558\uae30 ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(tax_data.dtypes)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"read_csv()"),"\ub85c \ub370\uc774\ud130\ub97c \uc77d\uc744 \ub54c ",(0,l.kt)("inlineCode",{parentName:"li"},"dtype")," \uc0ac\uc6a9",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"column name\uacfc data type\uc744 dict\ub85c \ub123\uae30"),(0,l.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130 \uac12\uc758 \uc790\ub8cc\ud615\uc740 object")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'tax_data = pd.read_csv("us_tax_data_2016.csv", dtype={"zipcode": str})\nprint(tax_data.dtypes)\n')),(0,l.kt)("h3",{id:"missing-data"},"missing data"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pandas\ub294 NA \ub610\ub294 NULL \uac19\uc740 \uac12\uc744 \uc790\ub3d9\uc73c\ub85c \uc778\uc2dd\ud558\uc5ec \uc218\ube44\uac8c \ub370\uc774\ud130 \uc815\ub9ac\ub97c \ud560 \uc218 \uc788\ub2e4."),(0,l.kt)("li",{parentName:"ul"},"\ub354\ubbf8 \ucf54\ub4dc\uc640 \uac19\uc774 pandas\uac00 \uc778\uc2dd\ud558\uc9c0 \ubabb \ud558\ub294 \ub370\uc774\ud130\uac00 \uc788\uc744 \uc218\ub3c4 \uc788\ub2e4."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"na_values"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac12\uc744 NaN\uc73c\ub85c \ubc14\uafc0 \uc218 \uc788\uc74c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'tax_data = pd.read_csv("us_tax_data_2016.csv",\nna_values={"zipcode" : 0})\nprint(tax_data[tax_data.zipcode.isna()]) # na \uac12\ub9cc \ud655\uc778 \n')),(0,l.kt)("h3",{id:"error-handling"},"Error handling"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pandas\uac00 \ud30c\uc2f1\ud560 \uc218 \uc5c6\ub294 \uc904",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. \ub808\ucf54\ub4dc\uc5d0 \uc788\ub294 \uac83\ubcf4\ub2e4 \ub354 \ub9ce\uc740 \uac12"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"error_bad_lines=False"),": \ud30c\uc2f1\ud560 \uc218 \uc5c6\ub294 record \uc2a4\ud0b5",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"False\ub85c \ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uc904\uc744 \ube7c\uace0 \ucc98\ub9ac"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"warn_bad_lines"),": record\ub97c \uc2a4\ud0b5\ud560 \ub54c \uba54\uc2dc\uc9c0 \ud655\uc778",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"False\ub85c \ud558\uba74 \uc5d0\ub7ec \uba54\uc2dc\uc9c0 \ubcf4\uc5ec\uc8fc\uc9c0 \uc54a\uc74c")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'tax_data = pd.read_csv("us_tax_data_2016_corrupt.csv",\n                      error_bad_lines=False,\n                      warn_bad_lines=True)\n')),(0,l.kt)("h2",{id:"importing-data-from-excel-files"},"Importing Data From Excel Files"),(0,l.kt)("h3",{id:"data-wrangling"},"data wrangling"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"raw data\ub97c \ub2e4\ub978 \ud615\ud0dc\ub85c \uc804\ud658\ud558\uac70\ub098 mapping\ud558\ub294 \uacfc\uc815")),(0,l.kt)("h3",{id:"spreadsheet"},"Spreadsheet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Excel"),(0,l.kt)("li",{parentName:"ul"},"\ud589\uacfc \uc5f4 \ub370\uc774\ud130 \uc140\uacfc \ud568\uaed8 \ud14c\uc774\ube14\ub85c \uad6c\uc131"),(0,l.kt)("li",{parentName:"ul"},"\uc790\ub3d9\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8"),(0,l.kt)("li",{parentName:"ul"},"flat file\uc774 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud615\uc2dd\ub3c4 \uc9c0\uc6d0"),(0,l.kt)("li",{parentName:"ul"},"excel \ud30c\uc77c\uc774\ub098 workbook(\ud1b5\ud569\ubb38\uc11c)\uc5d0\ub294 \ub2e4\uc218\uc758 spreadsheet\uac00 \uc874\uc7ac\ud560 \uc218 \uc788\uc74c "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pandas"),"\uc5d0\uc11c ",(0,l.kt)("inlineCode",{parentName:"li"},"read_excel()"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc77d\uc74c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pandas as pd\n# Read the Excel file\nsurvey_data = pd.read_excel("fcc_survey.xlsx")\n# View the first 5 lines of data\nprint(survey_data.head())\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"metadata header\ub098 invoice \uac19\uc740 \ub370\uc774\ud130\ub294 non-tabular\uc774\uc9c0\ub9cc spreadsheet\uc5d0 \uc788\uc744 \uc218 \uc788\uc74c",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"read_excel()"),"\uc758 argument\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucc98\ub9ac"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nrows"),": load\ud560 \ub54c \ud589 \uc218 \uc904\uc774\uae30"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"skiprows"),": \ucc98\uc74c \uba87 \uc904\uc744 skip \ud560 \uac74\uc9c0 \uc124\uc815"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"usecols"),": \uac00\uc838\uc62c \ubaa8\ub4e0 \uc5f4 \uc774\ub984 \ub610\ub294 \ubaa8\ub4e0 \uc5f4 \ubc88\ud638",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'\ubb38\uc790\uc5f4 \ubc94\uc704\ub3c4 \ud5c8\uc6a9(e.g. "A:P")')))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Read columns W-AB and AR of file, skipping metadata header\nsurvey_data = pd.read_excel("fcc_survey_with_headers.xlsx",\n                            skiprows=2,\n                            usecols="W:AB, AR")\n# View data\nprint(survey_data.head())\n')),(0,l.kt)("h3",{id:"single-sheet"},"single sheet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"read_excel()"),"\uc740 \uccab\ubc88\uc9f8 sheet\ub9cc \uac00\uc838\uc634"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sheet_name"),"\uc73c\ub85c \ub2e4\ub978 sheet\ub97c \ub85c\ub4dc\ud560 \uc218 \uc788\uc74c",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc774\ub984 \ub610\ub294 \ubc88\ud638\uc758 \uc870\ud569\uc774 \ud3ec\ud568\ub41c \ubaa9\ub85d\uc774 \ud5c8\uc6a9"),(0,l.kt)("li",{parentName:"ul"},"0\ubd80\ud130 \uc2dc\uc791"))),(0,l.kt)("li",{parentName:"ul"},"argument\uac00 \ubaa8\ub4e0 sheet\uc5d0 \uc124\uc815\ub428"),(0,l.kt)("li",{parentName:"ul"},"sheet \uc778\ub371\uc2a4\uc640 \uc774\ub984\uc744 \ubd88\ub7ec\uc640\uc11c \ub370\uc774\ud130\uac00 \uac19\uc740\uc9c0 \ube44\uad50")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Get the second sheet by position index\nsurvey_data_sheet2 = pd.read_excel('fcc_survey.xlsx', sheet_name=1)\n# Get the second sheet by name\nsurvey_data_2017 = pd.read_excel('fcc_survey.xlsx', sheet_name='2017')\nprint(survey_data_sheet2.equals(survey_data_2017)) # true\n")),(0,l.kt)("h3",{id:"all-sheet"},"all sheet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sheet_name=None"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'survey_responses = pd.read_excel("fcc_survey.xlsx", sheet_name=None)\nprint(type(survey_responses))\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"<class 'collections.OrderedDict'>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for key, value in survey_responses.items():\nprint(key, type(value))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"2016 <class 'pandas.core.frame.DataFrame'>\n2017 <class 'pandas.core.frame.DataFrame'>\n")),(0,l.kt)("h3",{id:"\uc9c0\uae08\uae4c\uc9c0-\ud55c-\uac83\ub4e4-\uc804\ubd80-\uc0ac\uc6a9\ud574\ubcf4\uae30"},"\uc9c0\uae08\uae4c\uc9c0 \ud55c \uac83\ub4e4 \uc804\ubd80 \uc0ac\uc6a9\ud574\ubcf4\uae30"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uac01\uac01\uc758 sheet\uc5d0 \ub2e4\ub978 \ub144\ub3c4 \ub3d9\uc548 \uac19\uc740 \uc5f4\uc774 \uc788\uc74c -> DataFrame\uc73c\ub85c \ud569\uce58\uae30"),(0,l.kt)("li",{parentName:"ul"},"value\ub294 worksheet\uc5d0 \ud574\ub2f9\ud558\ub294 DataFrame, key\ub294 sheet \uc774\ub984")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Create empty data frame to hold all loaded sheets\nall_responses = pd.DataFrame()\n# Iterate through data frames in dictionary\nfor sheet_name, frame in survey_responses.items():\n# Add a column so we know which year data is from\nframe["Year"] = sheet_name\n# Add each data frame to all_responses\nall_responses = all_responses.append(frame)\n# View years in data\nprint(all_responses.Year.unique())\n')),(0,l.kt)("h3",{id:"pandas\uc5d0\uc11c-boolean-type-\ucc98\ub9ac"},"pandas\uc5d0\uc11c boolean type \ucc98\ub9ac"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"True/False"),(0,l.kt)("li",{parentName:"ul"},"pandas\uc5d0\uc11c\ub294 Tru/False column\uc744 float data\ub85c load",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dtype")," argument\ub85c bool type\uc73c\ub85c \ubcc0\ud658 \uac00\ub2a5")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Load data, casting True/False columns as Boolean\nbool_data = pd.read_excel("fcc_survey_booleans.xlsx",\n                          dtype={"AttendedBootcamp": bool,\n                          "AttendedBootCampYesNo": bool,\n                          "AttendedBootcampTF":bool,\n                          "BootcampLoan": bool,\n                          "LoanYesNo": bool,\n                          "LoanTF": bool})\n                          print(bool_data.dtypes)\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"boolean column\uc5d0\uc11c NA/missing value\ub294 True\ub85c \ubcc0\ud55c\ub2e4. ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. Yes/No \uac19\uc740 \uac12 -> True"),(0,l.kt)("li",{parentName:"ul"},"\uc774 \ubb38\uc81c\ub3c4 ",(0,l.kt)("inlineCode",{parentName:"li"},"true_values")," argument\ub85c True value\ub97c \ucee4\uc2a4\ud140\ud558\uc5ec \ud574\uacb0 \uac00\ub2a5"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"false_values"),"\ub85c\ub294 False value\ub97c \ucee4\uc2a4\ud140")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Load data with Boolean dtypes and custom T/F values\nbool_data = pd.read_excel("fcc_survey_booleans.xlsx",\n                          dtype={"AttendedBootcamp": bool,\n                          "AttendedBootCampYesNo": bool,\n                          "AttendedBootcampTF":bool,\n                          "BootcampLoan": bool,\n                          "LoanYesNo": bool,\n                          "LoanTF": bool},\n                          true_values=["Yes"],\n                          false_values=["No"])\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uadf8\ub798\ub3c4 NA\uac00 True\ub85c \uc778\ucf54\ub529\ub418\ub294 \ubb38\uc81c\uac00 \ub0a8\uc544\uc788\uc74c")),(0,l.kt)("h3",{id:"boolean\uc73c\ub85c-casting\ud558\uc5ec-\uc0ac\uc6a9\ud560-\ub54c-\uace0\ub824\ud560-\uc810"},"boolean\uc73c\ub85c casting\ud558\uc5ec \uc0ac\uc6a9\ud560 \ub54c \uace0\ub824\ud560 \uc810"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"NA \uac12\uc758 \uc874\uc7ac \uc5ec\ubd80",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"NA\uac00 True\ub85c \uc778\ucf54\ub529\ub418\ub294 \ubb38\uc81c -> \uc798\ubabb \ucf54\ub529\ub428"))),(0,l.kt)("li",{parentName:"ul"},"\ubd84\uc11d\uc5d0\uc11c column\uc744 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud560 \uac83\uc778\uac00"),(0,l.kt)("li",{parentName:"ul"},"boolean\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 float or integer\ub85c \uc720\uc9c0\ud560 \uac83\uc778\uac00")),(0,l.kt)("h3",{id:"datetime"},"datetime"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Python\uc740 \ub0a0\uc9dc\uc640 \uc2dc\uac04\uc744 datetime\uc774\ub77c\ub294 type\uc73c\ub85c \uc800\uc7a5"),(0,l.kt)("li",{parentName:"ul"},"\ubb34\uc218\ud55c \ud615\ud0dc\uc758 string format\uc73c\ub85c \ud45c\ud604\ub420 \uc218 \uc788\uc74c"),(0,l.kt)("li",{parentName:"ul"},"\ud45c\uc900 \ud615\uc2dd \uc874\uc7ac")),(0,l.kt)("h3",{id:"pandas-datetime"},"pandas datetime"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"datetime column\uc740 object(string)\uc73c\ub85c load"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dtype"),"\uc774 \uc544\ub2cc ",(0,l.kt)("inlineCode",{parentName:"li"},"parse_dates"),"\ub97c \uc0ac\uc6a9",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ud30c\uc2f1\ud560 \uc5f4 \uc774\ub984 \ub610\ub294 \uc22b\uc790\ub97c \ud5c8\uc6a9"),(0,l.kt)("li",{parentName:"ul"},"list\ub3c4 \ud5c8\uc6a9"),(0,l.kt)("li",{parentName:"ul"},"dict\uc5d0 \uc800\uc7a5")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# List columns of dates to parse\ndate_cols = ["Part1StartTime", "Part1EndTime"]\n# Load file, parsing standard datetime columns\nsurvey_df = pd.read_excel("fcc_survey.xlsx",\nparse_dates=date_cols)\n\n# Check data types of timestamp columns\nprint(survey_df[["Part1StartTime",\n                "Part1EndTime",\n                "Part2StartDate",\n                "Part2StartTime",\n                "Part2EndTime"]].dtypes)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Part1StartTime    datetime64[ns]\nPart1EndTime      datetime64[ns]\nPart2StartDate    object\nPart2StartTime    object\nPart2EndTime      object\ndtype: object\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ub0b4\ubd80\uc5d0 \ubaa9\ub85d\uc744 \ucd94\uac00\ud558\uc5ec \ub0a0\uc9dc\ub97c \uad6c\ubd84")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# List columns of dates to parse\ndate_cols = ["Part1StartTime",\n            "Part1EndTime",\n            [["Part2StartDate", "Part2StartTime"]]]\n# Load file, parsing standard and split datetime columns\nsurvey_df = pd.read_excel("fcc_survey.xlsx", parse_dates=date_cols)\nprint(survey_df.head(3))\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"column name \uc81c\uc5b4 -> dict \uc0ac\uc6a9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# List columns of dates to parse\ndate_cols = {"Part1Start": "Part1StartTime",\n            "Part1End": "Part1EndTime",\n            "Part2Start": ["Part2StartDate",\n            "Part2StartTime"]}\n# Load file, parsing standard and split datetime columns\nsurvey_df = pd.read_excel("fcc_survey.xlsx", parse_dates=date_cols)\nprint(survey_df.Part2Start.head(3))\n')),(0,l.kt)("h3",{id:"non-standard-date"},"Non-standard date"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parse_dates"),"\ub294 non-standard datetime format\uc5d0\ub294 \uc801\uc6a9X"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parse_dates"),"\uac00 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc73c\uba74 \ub370\uc774\ud130\ub97c load\ud55c \ud6c4 ",(0,l.kt)("inlineCode",{parentName:"li"},"pd.to_datetime()")," \uc0ac\uc6a9 ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DataFrame\uc758 column \ubcc0\ud658"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"format"),": format \uc124\uc815 ")))),(0,l.kt)("h3",{id:"datetime-format"},"Datetime format"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"strftime",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"%d : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c \ub0a0\uc9dc\ub97c \ud45c\uc2dc"),(0,l.kt)("li",{parentName:"ul"},"%m : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c \uc6d4\uc744 \ud45c\uc2dc"),(0,l.kt)("li",{parentName:"ul"},"%y : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c 2\uc790\ub9ac \ub144\ub3c4"),(0,l.kt)("li",{parentName:"ul"},"%Y : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c 4\uc790\ub9ac \ub144\ub3c4  "),(0,l.kt)("li",{parentName:"ul"},"%H : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c \uc2dc\uac04 (24\uc2dc\uac04 \ud45c\uae30)"),(0,l.kt)("li",{parentName:"ul"},"%I : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c \uc2dc\uac04 (12\uc2dc\uac04 \ud45c\uae30)"),(0,l.kt)("li",{parentName:"ul"},"%M : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c \ubd84"),(0,l.kt)("li",{parentName:"ul"},"%S : 0\uc744 \ucc44\uc6b4 10\uc9c4\uc218 \ud45c\uae30\ub85c \ucd08")))),(0,l.kt)("h3",{id:"parsing-non-standard-date"},"parsing non-standard date"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'format_string = "%m%d%Y %H:%M:%S"\nsurvey_df["Part2EndTime"] = pd.to_datetime(survey_df["Part2EndTime"], format=format_string)\nprint(survey_df.Part2EndTime.head())\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"0 2016-03-29 21:27:25\n1 2016-03-29 21:29:10\n2 2016-03-29 21:28:21\n3 2016-03-29 21:30:51\n4 2016-03-29 21:31:54\nName: Part2EndTime, dtype: datetime64[ns]\n")),(0,l.kt)("h2",{id:"importing-data-from-databases"},"Importing Data from Databases"),(0,l.kt)("h3",{id:"relational-database"},"Relational Database"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"entity: DB\uc5d0\uc11c \uc0ac\uc6a9\uc790\ub4e4\uc774 \uad00\uc2ec\uc744 \uac16\ub294 \ubaa8\ub4e0 \uc694\uc18c(e.g. \uace0\uac1d, \ubd80\ud488, \uc9c0\ub9ac\uc801 \uc704\uce58\uc815\ubcf4 \ub4f1)"),(0,l.kt)("li",{parentName:"ul"},"RDB\ub294 entity\uc758 instance\ub85c \ud45c\ud604\ub41c row"),(0,l.kt)("li",{parentName:"ul"},"column entity\uc758 attribute\ub85c \ud45c\ud604\ub41c column "),(0,l.kt)("li",{parentName:"ul"},"table\uc740 unique key or unique identifier\ub97c \ud1b5\ud558\uc5ec \uc5f0\uacb0\ud560 \uc218 \uc788\uc74c "),(0,l.kt)("li",{parentName:"ul"},"SQL",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Microsoft SQL Server"),(0,l.kt)("li",{parentName:"ul"},"ORACLE"),(0,l.kt)("li",{parentName:"ul"},"PostgreSQL"),(0,l.kt)("li",{parentName:"ul"},"SQLite",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uc77c\ubc18\uc801\uc774\uace0 \uc790\uccb4\uc801\uc778 \ucef4\ud4e8\ud130 \ud30c\uc77c\ub85c \uc800\uc7a5 -> \ub370\uc774\ud130 \uacf5\uc720\uc5d0 \uc801\ud569")))))),(0,l.kt)("h3",{id:"\ub370\uc774\ud130-\uc77d\uae30"},"\ub370\uc774\ud130 \uc77d\uae30"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"DB\uc5d0 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95 \ub9cc\ub4e4\uae30"),(0,l.kt)("li",{parentName:"ol"},"SQL, pandas\ub85c query")),(0,l.kt)("h3",{id:"sqlalchemy"},"SQLAlchemy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"create_engine()"),"\uc740 DB\uc5d0 \ub300\ud55c URL\uc744 \uac00\uc838\uc640\uc11c DB \uc5f0\uacb0\uc744 \uad00\ub9ac\ud558\ub294 engine object\ub97c \ub9cc\ub4ec",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"URL\uc740 DB\ub9c8\ub2e4 \ud328\ud134\uc774 \ub2e4\ub97c \uc218 \uc788\uc74c"),(0,l.kt)("li",{parentName:"ul"},"SQLite URL format: sqlite:///filename.db")))),(0,l.kt)("h3",{id:"querying-db"},"Querying DB"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pd.read_sql(query, engine)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query"),": SQL query string, table name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"engine"),": \uc5d4\uc9c4 \uac1d\uccb4")))),(0,l.kt)("h3",{id:"select"},"SELECT"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"-- \uae30\ubcf8\nSELECT [column_names] FROM [table_name];\n-- table\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130 -> ' * ' \uc0ac\uc6a9\nSELECT * FROM [table_name];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ucffc\ub9ac \uacb0\uacfc\uc5d0 \ud3ec\ud568\ud560 \uc5f4\uc744 \uacb0\uc815",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"query: \uc27d\uac8c \uc124\uba85\ud558\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 DB\uc5d0 \ub370\uc774\ud130\ub97c \uc694\uccad\ud558\ub294 \uac83"))),(0,l.kt)("li",{parentName:"ul"},"\ub300\ubb38\uc790 \uc0ac\uc6a9, \ub05d\uc5d0 \uc138\ubbf8\ucf5c\ub860(;)")),(0,l.kt)("h3",{id:"pandas-sqlalchemy-\uc0ac\uc6a9"},"pandas, sqlalchemy \uc0ac\uc6a9"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Load pandas and sqlalchemy\'s create_engine\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n# Create database engine to manage connections\nengine = create_engine("sqlite:///data.db")\n\n# Load entire weather table by table name\nweather = pd.read_sql("weather", engine) # \ud14c\uc774\ube14\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130\n\nprint(weather.head())\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"SQL\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc6d0\ud558\ub294 \ub370\uc774\ud130\ub97c \uc120\ud0dd\ud560 \uc218\ub3c4 \uc788\uc74c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Load entire weather table with SQL\nweather = pd.read_sql("SELECT * FROM weather", engine)\n')),(0,l.kt)("h3",{id:"where-\ubb38"},"WHERE \ubb38"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT [column_names]\nFROM [table_name]\nWHERE [condition];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc870\uac74\ubb38"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"="),", ",(0,l.kt)("inlineCode",{parentName:"li"},">"),", ",(0,l.kt)("inlineCode",{parentName:"li"},">="),", ",(0,l.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"<=")," \ud5c8\uc6a9"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<>"),": \uac19\uc9c0 \uc54a\uc74c(\ud30c\uc774\uc36c\uc5d0\uc11c\ub294 !=)"),(0,l.kt)("li",{parentName:"ul"},"e.g")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM weather\nWHERE tmax > 32;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ud14d\uc2a4\ud2b8 \ud544\ud130\ub9c1 \uac00\ub2a5",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub300\uc18c\ubb38\uc790 \uad6c\ubd84"))),(0,l.kt)("li",{parentName:"ul"},"e.g.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"/* Get records about incidents in Brooklyn */\nSELECT * FROM hpd311calls\nWHERE borough = 'BROOKLYN';\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc9c0\uae08\uae4c\uc9c0 \ud55c \uac83\ub4e4 \ubaa8\ub450 \uc0ac\uc6a9\ud574\ubcf4\ub294 \uc608")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Load libraries\nimport pandas as pd\nfrom sqlalchemy import create_engine\n# Create database engine\nengine = create_engine("sqlite:///data.db")\n# Write query to get records from Brooklyn\nquery = """SELECT * FROM hpd311calls\n            WHERE borough = \'BROOKLYN\';"""\n# Query the database\nbrooklyn_calls = pd.read_sql(query, engine)\nprint(brookyn_calls.borough.unique()) # [\'BROOKLYN\']\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AND"),"\ub098 ",(0,l.kt)("inlineCode",{parentName:"li"},"OR"),"\ub3c4 \uc870\uac74\uc5d0 \uc0ac\uc6a9 \uac00\ub2a5 ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Write query to get records about plumbing in the Bronx\nand_query = """SELECT *\n                FROM hpd311calls\n                WHERE borough = \'BRONX\'\n                AND complaint_type = \'PLUMBING\';""" \n# Get calls about plumbing issues in the Bronx\nbx_plumbing_calls = pd.read_sql(and_query, engine)\n# Check record count\nprint(bx_plumbing_calls.shape)\n')),(0,l.kt)("h3",{id:"distinct"},"DISTINCT"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ubcf4\uace0 \uc2f6\uc740 column\uc774 \uc911\ubcf5\ub418\ub294 \uac83\uc744 \ub9c9\uc74c -> unique value"),(0,l.kt)("li",{parentName:"ul"},"\uace0\uc720\ud55c \uc9d1\ud569\uc73c\ub85c \ubcf8\ub2e4\ub294 \uc758\ubbf8"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SELECT")," \ub4a4\uc5d0 \uc0ac\uc6a9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT [column names] FROM [table];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc911\ubcf5 \uac12 \uc5c6\uc560\uae30")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT * FROM [table];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc608\uc81c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT incident_address, borough\nFROM hpd311calls;\n")),(0,l.kt)("h3",{id:"aggregate-functions"},"Aggregate Functions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uc9d1\uacc4 \ud568\uc218"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SUM"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"AVG"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"MAX"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"MIN"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AVG(tmax) FROM weather;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"COUNT")),(0,l.kt)("li",{parentName:"ul"},"query \uc870\uac74\uc744 \ub9cc\ub098\ub294 row\uc758 \uc218 ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*) FROM [table_name];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"column\uc5d0 unique value \uac1c\uc218 \uc5bb\uae30")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(DISTINCT [column_names]) FROM [table_name];\n")),(0,l.kt)("h3",{id:"group-by"},"GROUP BY"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\uadf8\ub8f9\ud654 ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"/* Get counts of plumbing calls by borough */\nSELECT borough,\n        COUNT(*)\nFROM hpd311calls\nWHERE complaint_type = 'PLUMBING'\nGROUP BY borough;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ud30c\uc774\uc36c \uc0ac\uc6a9 \uc608\uc81c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Create database engine\nengine = create_engine("sqlite:///data.db")\n# Write query to get plumbing call counts by borough\nquery = """SELECT borough, COUNT(*)\n            FROM hpd311calls\n            WHERE complaint_type = \'PLUMBING\'\n            GROUP BY borough;"""\n# Query databse and create data frame\nplumbing_call_counts = pd.read_sql(query, engine)\nprint(plumbing_call_counts)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  borough       COUNT(*)\n0 BRONX         2016\n1 BROOKLYN      2702\n2 MANHATTAN     1413\n3 QUEENS        808\n4 STATEN ISLAND 178\n")),(0,l.kt)("h3",{id:"key"},"Key"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"primary key",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"unique"))),(0,l.kt)("li",{parentName:"ul"},"foreign key",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub450 table \uac04\uc758 \uc5f0\uacb0\ub418\ub294 column")))),(0,l.kt)("h3",{id:"join"},"Join"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ub458 \uc774\uc0c1\uc758 \ud14c\uc774\ube14\uc744 \uc5f0\uacb0"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"table.column")," ",(0,l.kt)("inlineCode",{parentName:"li"},"."),"\uc73c\ub85c table\uacfc column \uc9c0\uc815"),(0,l.kt)("li",{parentName:"ul"},"\ub450 \ud14c\uc774\ube14\uc5d0 \ubaa8\ub450 \ub098\ud0c0\ub098\ub294 \ud0a4 \uac12\uc774 \uc788\ub294 record\ub9cc \ubc18\ud658"),(0,l.kt)("li",{parentName:"ul"},"\ub3d9\uc77c\ud55c \ub370\uc774\ud130 \ud0c0\uc785\uc774\uc5b4\uc57c \ud55c\ub2e4.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM hpd311calls\nJOIN weather\nON hpd311calls.created_date = weather.date;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"WHERE"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc870\uac74 \uc0ac\uc6a9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"/* Get only heat/hot water calls and join in weather data */\nSELECT * FROM hpd311calls\nJOIN weather\nON hpd311calls.created_date = weather.date\nWHERE hpd311calls.complaint_type = 'HEAT/HOT WATER';\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Aggregate function\ub3c4 \uac19\uc774 \uc0ac\uc6a9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Get call counts by borough\n# and join in population and housing counts\nquery = """SELECT hpd311calls.borough,\n            COUNT(*),\n            boro_census.total_population,\n            boro_census.housing_units\n            FROM hpd311calls\n            JOIN boro_census\n            ON hpd311calls.borough = boro_census.borough\n            GROUP BY hpd311calls.borough;"""\ncall_counts = pd.read_sql(query, engine)\nprint(call_counts)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  borough       COUNT(*) total_population housing_units\n0 BRONX         29874    1455846          524488\n1 BROOKLYN      31722    2635121          1028383\n2 MANHATTAN     20196    1653877          872645\n3 QUEENS        11384    2339280          850422\n4 STATEN ISLAND 1322     475948           179179\n")),(0,l.kt)("h2",{id:"importing-json-data-and-working-with-apis"},"Importing JSON Data and Working with APIs"),(0,l.kt)("h3",{id:"json"},"JSON"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"JavaScript Object Notation"),(0,l.kt)("li",{parentName:"ul"},"\uc6f9\uc5d0\uc11c \ud754\ud558\uac8c \uc4f0\uc774\ub294 data format"),(0,l.kt)("li",{parentName:"ul"},"tabular \ud615\ud0dc\uac00 \uc544\ub2d8",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"record\uac00 \ubaa8\ub450 \ub3d9\uc77c\ud55c \uc18d\uc131\uc744 \uac00\uc9c8 \ud544\uc694 \uc5c6\uc74c"))),(0,l.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130\ub294 \uac1d\uccb4\ub4e4\uc758 \ubaa8\uc784\uc73c\ub85c \uad6c\uc131\ub428"),(0,l.kt)("li",{parentName:"ul"},"attribute-value \ud615\ud0dc",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"python\uc758 dict\uc640 \ube44\uc2b7\ud568"))),(0,l.kt)("li",{parentName:"ul"},"nested"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"read_json()"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"JSON \uacbd\ub85c \ub610\ub294 JSON\uc744 \ubb38\uc790\uc5f4\ub85c \uc9c1\uc811 \uc81c\uacf5"),(0,l.kt)("li",{parentName:"ul"},"pandas\uac00 \uc790\ub3d9\uc73c\ub85c data type\uc744 \uc720\ucd94\ud558\uc9c0\ub9cc ",(0,l.kt)("inlineCode",{parentName:"li"},"dtype"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub530\ub85c \uc9c0\uc815 \uac00\ub2a5 "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"orient"),"\ub97c  \uc0ac\uc6a9\ud558\uc5ec JSON \ubb38\uc790\uc5f4\uc758 \ud615\uc2dd \uc9c0\uc815"))),(0,l.kt)("li",{parentName:"ul"},"pandas\uac00 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 record, column \ubc29\ud5a5\uc744 \uc790\ub3d9\uc73c\ub85c \uac10\uc9c0"),(0,l.kt)("li",{parentName:"ul"},"pandas\uac00 \uc5b4\ub5bb\uac8c \ud14c\uc774\ube14\uc5d0 \uc815\ub82c\ud560\uc9c0 \ucd94\uce21")),(0,l.kt)("h3",{id:"record-orientation"},"Record orientation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"table\uc758 record\ub85c \ubcc0\ud658\ub418\ub294 dict\ub85c \uad6c\uc131")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "age_adjusted_death_rate": "7.6",\n    "death_rate": "6.2",\n    "deaths": "32",\n    "leading_cause": "Accidents Except Drug Posioning (V01-X39, X43, X45-X59, Y85-Y86)",\n    "race_ethnicity": "Asian and Pacific Islander",\n    "sex": "F",\n    "year": "2007"\n  },\n  {\n    "age_adjusted_death_rate": "8.1", \n    "death_rate": "8.3",\n    "deaths": "87",\n    ...\n')),(0,l.kt)("h3",{id:"column-orientation"},"Column orientation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"attribute \uc774\ub984\uc744 \ubc18\ubcf5\ud558\uc9c0 \uc54a\uc544 \ud30c\uc77c \ud06c\uae30\ub97c \uc904\uc784")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "age_adjusted_death_rate": {\n    "0": "7.6",\n    "1": "8.1",\n    "2": "7.1",\n    "3": ".",\n    "4": ".",\n    "5": "7.3",\n    "6": "13",\n    "7": "20.6",\n    "8": "17.4",\n    "9": ".",\n    "10": ".",\n    "11": "19.8",\n    ...\n')),(0,l.kt)("h3",{id:"split"},"split"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u2018split\u2019 : dict like {\u2018index\u2019 -> ","[index]",", \u2018columns\u2019 -> ","[columns]",", \u2018data\u2019 -> ","[values]","}")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columns": [\n    "age_adjusted_death_rate",\n    "death_rate",\n    "deaths",\n    "leading_cause",\n    "race_ethnicity",\n    "sex",\n    "year"\n  ],\n  "index": [...],\n  "data": [\n    [\n      "7.6"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pandas as pd\ndeath_causes = pd.read_json("nyc_death_causes.json",\n                            orient="split")\nprint(death_causes.head())\n')),(0,l.kt)("h3",{id:"api"},"API"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Application Programming Interface"),(0,l.kt)("li",{parentName:"ul"},"application\uc774 \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8\uacfc \ud1b5\uc2e0\ud558\uac8c \ud574\uc8fc\ub294 \uac83"),(0,l.kt)("li",{parentName:"ul"},"\uc694\uccad\uc744 \ubcf4\ub0bc endpoint \uc81c\uacf5")),(0,l.kt)("h3",{id:"requests"},"Requests"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Python\uc5d0\uc11c HTTP \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \ubaa8\ub4c8"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"requests.get(url_string)"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec GET \uc694\uccad\uc744 \ubcf4\ub0c4",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"URL\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc634"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"params"),": dict\ub97c \uc0ac\uc6a9\ud558\uc5ec customize API request\ub97c \ubcf4\ub0c4"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"headers"),": dict \uc0ac\uc6a9, user authentication \ud0a4\uac00 \ud544\uc694\ud55c \uacbd\uc6b0 header\ub85c \uc804\ub2ec"))),(0,l.kt)("li",{parentName:"ul"},"\uacb0\uacfc\ub294 data\uc640 metadata\ub97c \ud3ec\ud568\ud558\ub294 ",(0,l.kt)("inlineCode",{parentName:"li"},"response")," \uac1d\uccb4",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"response.json()"),"\ub85c JSON data\ub97c \ubc1b\uc74c"),(0,l.kt)("li",{parentName:"ul"},"DataFrame\uc73c\ub85c \ubc1b\uc73c\ub824\uba74 ",(0,l.kt)("inlineCode",{parentName:"li"},"pd.DataFrame()")," \uc0ac\uc6a9")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import requests\nimport pandas as pd\napi_url = "https://api.yelp.com/v3/businesses/search"\n# Set up parameter dictionary according to documentation\nparams = {"term": "bookstore",\n          "location": "San Francisco"}\n# Set up header dictionary w/ API key according to documentation\nheaders = {"Authorization": "Bearer {}".format(api_key)}\n# Call the API\nresponse = requests.get(api_url,\n                        params=params,\n                        headers=headers)\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"JSON\uc73c\ub85c \ubc1b\uae30")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Isolate the JSON data from the response object\ndata = response.json()\nprint(data)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"DataFrame\uc73c\ub85c \ubc1b\uae30")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Load businesses data to a data frame\nbookstores = pd.DataFrame(data["businesses"])\nprint(bookstores.head(2))\n')),(0,l.kt)("h3",{id:"nested-json"},"Nested JSON"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"API\ub294 \uc885\uc885 \ubc18\ud658\ub418\ub294 \ub370\uc774\ud130 \uc591 \uc81c\ud55c",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub300\uc6a9\ub7c9 \ub370\uc774\ud130\uc14b\uc744 \uc804\uc1a1\ud558\ub294 \ub370 \uc2dc\uac04\uacfc \ub9ac\uc18c\uc2a4\uac00 \ub9ce\uc774 \uc18c\ubaa8\ub420 \uc218 \uc788\uae30 \ub54c\ubb38")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Print columns containing nested data\nprint(bookstores[["categories", "coordinates", "location"]].head(3))\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"pandas.io.json")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"JSON\uc744 \uc77d\uace0 \uc4f0\uae30 \uc704\ud55c submodule"),(0,l.kt)("li",{parentName:"ul"},"import \ud544\uc694"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"json_normalize()")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Normalize semi-structured JSON data into a flat table."),(0,l.kt)("li",{parentName:"ul"},"DataFrame \ubc18\ud658"),(0,l.kt)("li",{parentName:"ul"},"JSON\uc5d0\uc11c DataFrame\uc744 \uc27d\uac8c \uc0dd\uc131\ud558\ub3c4\ub85d \ub3c4\uc6c0\uc744 \uc90c"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sep"),": str, default \u2018.\u2019",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Nested records will generate names separated by sep. e.g., for sep=\u2019.\u2019, {\u2018foo\u2019: {\u2018bar\u2019: 0}} -> foo.bar.")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import pandas as pd\nimport requests\nfrom pandas.io.json import json_normalize\n# Set up headers, parameters, and API endpoint\napi_url = "https://api.yelp.com/v3/businesses/search"\nheaders = {"Authorization": "Bearer {}".format(api_key)}\nparams = {"term": "bookstore",\n          "location": "San Francisco"}\n# Make the API call and extract the JSON data\nresponse = requests.get(api_url,\n                        headers=headers,\n                        params=params)\ndata = response.json()\n\n# Flatten data and load to data frame, with _ separators\nbookstores = json_normalize(data["businesses"], sep="_")\nprint(list(bookstores))\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record_path"),": str or list of str, default None",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\uac01 \uac1d\uccb4\uc758 record\uc758 list \uacbd\ub85c, If not passed, data will be assumed to be an array of records."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"meta"),": list of paths (str or list of str), default None",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Fields to use as metadata for each record in resulting table."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"meta_prefix"),": str, default None",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If True, prefix records with dotted (?) path, e.g. foo.bar.field if meta is ","[\u2018foo\u2019, \u2018bar\u2019]",".")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Flatten categories data, bring in business details\ndf = json_normalize(data["businesses"],\n                    sep="_",\n                    record_path="categories",\n                    meta=["name", "alias", "rating",\n                        ["coordinates", "latitude"],\n                        ["coordinates", "longitude"]],\n                    meta_prefix="biz_")\n')),(0,l.kt)("h3",{id:"append"},"Append"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"append()")),(0,l.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130\ud504\ub808\uc784 \uacb0\ud569"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ignore_index"),": True\uba74 0\ubd80\ud130 \uc2dc\uc791")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Add an offset parameter to get cafes 51-100\nparams = {"term": "cafe", \n          "location": "NYC",\n          "sort_by": "rating", \n          "limit": 50,\n          "offset": 50\n}\n\nresult = requests.get(api_url, headers=headers, params=params)\nnext_50_cafes = json_normalize(result.json()["businesses"])\n\n# Append the results, setting ignore_index to renumber rows\ncafes = top_50_cafes.append(next_50_cafes, ignore_index=True)\n\n# Print shape of cafes\nprint(cafes.shape)\n')),(0,l.kt)("h3",{id:"merging"},"Merging"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"merge()")),(0,l.kt)("li",{parentName:"ul"},"SQL JOIN\uc758 pandas \ubc84\uc804"),(0,l.kt)("li",{parentName:"ul"},"\ub450 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uac01 \ub370\uc774\ud130\uc5d0 \uc874\uc7ac\ud558\ub294 \uace0\uc720\uac12(key)\uc744 \uae30\uc900\uc73c\ub85c \ubcd1\ud569"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"on"),": \uacf5\ud1b5\ub41c \uc5f4",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"merge\uc758 \uae30\uc900\uc774 \ub418\ub294 \uc5f4\uc758 \uc774\ub984\uc774 \uac19\uc744 \ub54c \uc0ac\uc6a9"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"left_on"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"right_on"),": \uc67c\ucabd \uc5f4, \uc624\ub978\ucabd \uc5f4",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\ub450 \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uc5f4 \uc774\ub984\uc774 \ub2e4\ub97c \ub54c \uc0ac\uc6a9")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Merge weather into call counts on date columns\nmerged = call_counts.merge(weather,\n                          left_on="created_date",\n                          right_on="date")\nprint(merged.head()\n')))}d.isMDXComponent=!0}}]);