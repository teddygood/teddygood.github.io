"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[877],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(t),c=r,k=d["".concat(o,".").concat(c)]||d[c]||m[c]||l;return t?a.createElement(k,i(i({ref:n},u),{},{components:t})):a.createElement(k,i({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3107:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={title:"Data Engineering \uc2a4\ud130\ub514 4\uc8fc\ucc28",date:"2021-09-14",draft:!1,description:"PseudoLab Data Science Fellowship 1\uae30",sidebar_position:1},i="Writing Efficient Python Code",p={unversionedId:"Group-Study/data-engineering/data-engineer-with-python-week-04",id:"Group-Study/data-engineering/data-engineer-with-python-week-04",title:"Data Engineering \uc2a4\ud130\ub514 4\uc8fc\ucc28",description:"PseudoLab Data Science Fellowship 1\uae30",source:"@site/docs/Group-Study/data-engineering/data-engineer-with-python-week-04.md",sourceDirName:"Group-Study/data-engineering",slug:"/Group-Study/data-engineering/data-engineer-with-python-week-04",permalink:"/docs/Group-Study/data-engineering/data-engineer-with-python-week-04",draft:!1,editUrl:"https://github.com/teddygood/teddygood.github.io/tree/main/docs/Group-Study/data-engineering/data-engineer-with-python-week-04.md",tags:[],version:"current",lastUpdatedAt:1671512338,formattedLastUpdatedAt:"2022\ub144 12\uc6d4 20\uc77c",sidebarPosition:1,frontMatter:{title:"Data Engineering \uc2a4\ud130\ub514 4\uc8fc\ucc28",date:"2021-09-14",draft:!1,description:"PseudoLab Data Science Fellowship 1\uae30",sidebar_position:1},sidebar:"sidebar",previous:{title:"Data Engineering \uc2a4\ud130\ub514 3\uc8fc\ucc28",permalink:"/docs/Group-Study/data-engineering/data-engineer-with-python-week-03"},next:{title:"Data Engineering \uc2a4\ud130\ub514 6\uc8fc\ucc28",permalink:"/docs/Group-Study/data-engineering/data-engineer-with-python-week-06"}},o={},s=[{value:"Foundations for efficiencies",id:"foundations-for-efficiencies",level:2},{value:"Efficient",id:"efficient",level:3},{value:"Defining Pythonic",id:"defining-pythonic",level:3},{value:"The Zen of Python",id:"the-zen-of-python",level:3},{value:"The Python Standard Library",id:"the-python-standard-library",level:3},{value:"NumPy array",id:"numpy-array",level:3},{value:"Timing and profiling code",id:"timing-and-profiling-code",level:2},{value:"Comparing runtime",id:"comparing-runtime",level:3},{value:"data structure \uc815\uc758 \ubc29\ubc95\uc5d0 \ub530\ub978 \uc2dc\uac04 \ucc28\uc774",id:"data-structure-\uc815\uc758-\ubc29\ubc95\uc5d0-\ub530\ub978-\uc2dc\uac04-\ucc28\uc774",level:3},{value:"\uac04\ub2e8\ud55c \ucf54\ub4dc \uc2dc\uac04 \ube44\uad50",id:"\uac04\ub2e8\ud55c-\ucf54\ub4dc-\uc2dc\uac04-\ube44\uad50",level:3},{value:"Code profiling",id:"code-profiling",level:3},{value:"\uac1d\uccb4 \ud06c\uae30",id:"\uac1d\uccb4-\ud06c\uae30",level:3},{value:"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9",id:"\uba54\ubaa8\ub9ac-\uc0ac\uc6a9\ub7c9",level:3},{value:"Gaining efficiencies",id:"gaining-efficiencies",level:2},{value:"zip",id:"zip",level:3},{value:"The collections module",id:"the-collections-module",level:3},{value:"The itertools module",id:"the-itertools-module",level:3},{value:"Set",id:"set",level:3},{value:"\ub8e8\ud504 \uc81c\uac70",id:"\ub8e8\ud504-\uc81c\uac70",level:3},{value:"\ub8e8\ud504\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95",id:"\ub8e8\ud504\ub97c-\ud6a8\uc728\uc801\uc73c\ub85c-\ub9cc\ub4dc\ub294-\ubc29\ubc95",level:3},{value:"Basic pandas optimizations",id:"basic-pandas-optimizations",level:2},{value:"pandas \ub2e4\uc2dc \uc815\ub9ac",id:"pandas-\ub2e4\uc2dc-\uc815\ub9ac",level:3},{value:"\uc0c8\ub85c\uc6b4 \uc5f4 \ub9cc\ub4e4\uae30",id:"\uc0c8\ub85c\uc6b4-\uc5f4-\ub9cc\ub4e4\uae30",level:3},{value:"itertuples()",id:"itertuples",level:3},{value:"apply()",id:"apply",level:3},{value:"\ube0c\ub85c\ub4dc \uce90\uc2a4\ud305 \uc0ac\uc6a9",id:"\ube0c\ub85c\ub4dc-\uce90\uc2a4\ud305-\uc0ac\uc6a9",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Docstring",id:"docstring",level:3},{value:"Google Style",id:"google-style",level:3},{value:"Numpydoc",id:"numpydoc",level:3},{value:"docstring \ubc1b\uae30",id:"docstring-\ubc1b\uae30",level:3},{value:"DRY and &quot;Do One Thing&quot;",id:"dry-and-do-one-thing",level:3},{value:"Pass by assignment",id:"pass-by-assignment",level:3},{value:"Context Managers",id:"context-managers",level:2},{value:"context manager\ub97c \uc791\uc131\ud558\ub294 \ubc29\ubc95",id:"context-manager\ub97c-\uc791\uc131\ud558\ub294-\ubc29\ubc95",level:3},{value:"yield",id:"yield",level:3},{value:"Nested contexts",id:"nested-contexts",level:3},{value:"Handling errors",id:"handling-errors",level:3},{value:"Decorators",id:"decorators",level:2},{value:"Functions as variables",id:"functions-as-variables",level:3},{value:"Functions as arguments",id:"functions-as-arguments",level:3},{value:"\ub2e4\ub978 \ud568\uc218 \ub0b4\uc5d0\uc11c \uc815\uc758\ud558\uae30",id:"\ub2e4\ub978-\ud568\uc218-\ub0b4\uc5d0\uc11c-\uc815\uc758\ud558\uae30",level:3},{value:"\ud568\uc218\ub97c \ubc18\ud658 \uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30",id:"\ud568\uc218\ub97c-\ubc18\ud658-\uac12\uc73c\ub85c-\uc0ac\uc6a9\ud558\uae30",level:3},{value:"Scope",id:"scope",level:3},{value:"Closure",id:"closure",level:3},{value:"Decorator",id:"decorator",level:3},{value:"More on Decorators",id:"more-on-decorators",level:2},{value:"Timer",id:"timer",level:3},{value:"Memoize",id:"memoize",level:3},{value:"Decorators and metadata",id:"decorators-and-metadata",level:3},{value:"decorator\uc758 argument",id:"decorator\uc758-argument",level:3},{value:"Timeout",id:"timeout",level:3}],u={toc:s};function m(e){let{components:n,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"writing-efficient-python-code"},"Writing Efficient Python Code"),(0,r.kt)("h2",{id:"foundations-for-efficiencies"},"Foundations for efficiencies"),(0,r.kt)("h3",{id:"efficient"},"Efficient"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Minimal completion time (fast runtime)"),(0,r.kt)("li",{parentName:"ul"},"Minimal resource consumption (small memory footprint)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"unnecessary overhead X"),(0,r.kt)("li",{parentName:"ul"},"memory footprint: \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ud558\ub294 \ub3d9\uc548 \uc0ac\uc6a9\ud558\uac70\ub098 \ucc38\uc870\ud558\ub294 \uba54\ubaa8\ub9ac \uc591"))),(0,r.kt)("li",{parentName:"ul"},"The goal of writing efficient code",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"reduce latency and overhead")))),(0,r.kt)("h3",{id:"defining-pythonic"},"Defining Pythonic"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Focus on readability"),(0,r.kt)("li",{parentName:"ul"},"Follow best practices and guiding principles of Python"),(0,r.kt)("li",{parentName:"ul"},"Python\uc740 Pythonic\ud558\uc9c0 \uc54a\uc740 \ubb38\ubc95\ub4e4\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uadf8\ub7f0 \ubb38\ubc95\ub4e4\uc740 \ub354 \ub290\ub9ac\uac8c \uc2e4\ud589\ub420 \uc218 \uc788\ub2e4.")),(0,r.kt)("h3",{id:"the-zen-of-python"},"The Zen of Python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import this\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n")),(0,r.kt)("h3",{id:"the-python-standard-library"},"The Python Standard Library"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Built-in types"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"list, tuple, set, dict, ..."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Built-in functions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"pinrt(), len(), enumerate(), map(), ..."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Built-in modules"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"os, sys, itertools, collections, ..."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"range(start, stop, step)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"range()\ub97c \uc801\uc6a9\ud558\uace0 list()\ub97c \uc801\uc6a9\ud574\uc57c\ud568.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# range(start, stop)\nnums = range(0, 11)\nprint(type(nums)) #   <class 'range'>\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# range(stop)\nnums = rane(11)\nnums_list = list(nums)\nprint(nums_list)\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"even_nums = range(2, 11, 2)\neven_nums_list = list(even_nums)\nprint(even_nums_list)\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums_list = [*range(1,13,2)]\nprint(nums_list) # [1, 3, 5, 7, 9, 11]\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enumerate(iterable, start=0)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"iterable \uc790\ub8cc\ud615(lsit, tuple, dict, set)\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc544 \uc778\ub371\uc2a4 \uac12\uc744 \ud3ec\ud568\ud558\ub294 \uac1d\uccb4 \ubc18\ud658")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"letters = ['a', 'b', 'c', 'd']\nindexed_letters = enumerate(letters)\nindexed_letters_list = list(indexed_letters)\nprint(indexed_letters_list) # [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"letters = ['a', 'b', 'c', 'd']\nindexed_letters = enumerate(letters, start=5)\nindexed_letters_list = list(indexed_letters)\nprint(indexed_letters_list) # [(5, 'a'), (6, 'b'), (7, 'c'), (8, 'd')]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"names = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']\nindexed_names_comp = [(i,name) for i,name in enumerate(names)]\nprint(indexed_names_comp) # [(1, 'Jerry'), (2, 'Kramer'), (3, 'Elaine'), (4, 'George'), (5, 'Newman')]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"indexed_names_unpack = [*enumerate(names, 1)]\nprint(indexed_names_unpack) # [(1, 'Jerry'), (2, 'Kramer'), (3, 'Elaine'), (4, 'George'), (5, 'Newman')]\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"map(function, iterable)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"return value\ub294 map object -> list or tuple\ub85c casting"),(0,r.kt)("li",{parentName:"ul"},"lambda(anonymous function)")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums = [1.5, 2.3, 3.4, 4.6, 5.0]\nrnd_nums = map(round, nums)\nprint(list(rnd_nums))\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums = [1, 2, 3, 4, 5]\nsqrd_nums = map(lambda x: x ** 2, nums)\nprint(list(sqrd_nums))\n")))),(0,r.kt)("h3",{id:"numpy-array"},"NumPy array"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ub9ce\uc740 \uc22b\uc790 \ub370\uc774\ud130\ub97c \ub9ac\uc2a4\ud2b8\uc5d0 \uad00\ub9ac\ud560 \ub54c \uc18d\ub3c4\uac00 \ub290\ub9ac\uace0 \uba54\ubaa8\ub9ac \ub9ce\uc774 \ucc28\uc9c0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud558\uba74 \uc801\uc740 \uba54\ubaa8\ub9ac\ub85c \ub9ce\uc740 \ub370\uc774\ud130 \ube60\ub974\uac8c \ucc98\ub9ac \uac00\ub2a5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ub9ac\uc2a4\ud2b8\uc640 \ub2e4\ub978 \uc810"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ubaa8\ub4e0 \uc6d0\uc18c\uac00 \uac19\uc740 \uc790\ub8cc\ud615(homogeneous)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uc790\ub8cc\ud615\uc774 \ub2e4\ub974\uba74 NumPy\uac00 \ub3d9\uc77c\ud558\uac8c \ub9de\ucda4"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dtype"),"\uc73c\ub85c \ud0c0\uc785 \ud655\uc778"))),(0,r.kt)("li",{parentName:"ul"},"\uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \ubc14\uafc0 \uc218 \uc5c6\ub2e4."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"[\ud589, \uc5f4]")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nnums_np = np.array(range(5)) # array([0, 1, 2, 3, 4])\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"broadcasting"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"vectorized operation \uc9c0\uc6d0 -> \ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ubaa8\ub4e0 \uac12\uc5d0 \ubc18\ubcf5 \uc5f0\uc0b0 \uac00\ub2a5"),(0,r.kt)("li",{parentName:"ul"},"\uc11c\ub85c \ub2e4\ub978 \ud06c\uae30\ub97c \uac00\uc9c4 \ub450 \ubc30\uc5f4\uc758 \uc5f0\uc0b0 \uc9c0\uc6d0",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ud06c\uae30\uac00 \uc791\uc740 \ubc30\uc5f4\uc744 \ud655\uc7a5\uc2dc\ucf1c \ud070 \ubc30\uc5f4\uc5d0 \ub9de\ucda4")))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums_np = np.array([-2, -1, 0, 1, 2])\nnums_np ** 2\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums = [[1, 2, 3],\n        [4, 5, 6]]\nnums_np = np.array(nums)\nprint(nums_np[0, 1]) # 2\nprint(nums_np[:, 0]) # [1 4]\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"boolean indexing"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums = [-2, -1, 0, 1, 2]\nnums_np = np.array(nums)\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums_np > 0 # array([False, False, False,  True,  True])\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums_np[nums_np > 0] # array([1, 2])\n")))),(0,r.kt)("h2",{id:"timing-and-profiling-code"},"Timing and profiling code"),(0,r.kt)("h3",{id:"comparing-runtime"},"Comparing runtime"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud6a8\uc728\uc801\uc778 \ucf54\ub4dc"),(0,r.kt)("li",{parentName:"ul"},"\ube60\ub978 \ucf54\ub4dc"),(0,r.kt)("li",{parentName:"ul"},"IPython\uc5d0\ub294 ",(0,r.kt)("inlineCode",{parentName:"li"},"%timeit"),"\ub85c runtime \uacc4\uc0b0"),(0,r.kt)("li",{parentName:"ul"},"magic commands",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"%"),"\uac00 \uc55e\uc5d0 \ubd99\uc74c"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"%lsmagic"),"\ub85c \uc0ac\uc6a9\uac00\ub2a5\ud55c commmand \ud655\uc778"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"%timeit"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28 \uc81c\uacf5"),(0,r.kt)("li",{parentName:"ul"},"\ub8e8\ud504 \ud69f\uc218"),(0,r.kt)("li",{parentName:"ul"},"\uc635\uc158",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-r"),": \ub7f0\ud0c0\uc784\uc744 \ucd94\uc815\ud558\ub294 \ub370 \uc0ac\uc6a9\ud560 \ubc18\ubcf5 \ud69f\uc218"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-n"),": \ub8e8\ud504 \uc218"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-o"),": \uc800\uc7a5")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\n\n%timeit rand_nums = np.random.rand(1000)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Set number of runs to 2 (-r2)\n# Set number of loops to 10 (-n10)\n%timeit -r2 -n10 rand_nums = np.random.rand(1000)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Single line of code\n%timeit nums = [x for x in range(10)]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Multiple lines of code\n%%timeit\nnums = []\nfor x in range(10):\nnums.append(x)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"times = %timeit -o rand_nums = np.random.rand(1000)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"times.timings\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"times.best\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"times.worst\n")),(0,r.kt)("h3",{id:"data-structure-\uc815\uc758-\ubc29\ubc95\uc5d0-\ub530\ub978-\uc2dc\uac04-\ucc28\uc774"},"data structure \uc815\uc758 \ubc29\ubc95\uc5d0 \ub530\ub978 \uc2dc\uac04 \ucc28\uc774"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"using formal name"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"formal_list = list()\nformal_dict = dict()\nformal_tuple = tuple()\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"using literal syntax"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"formal_list = []\nformal_dict = {}\nformal_tuple = ()\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"%timeit"),"\ub97c \uc0ac\uc6a9\ud574\ubcf4\uba74 literal syntax\uac00 \ub354 \ube60\ub974\ub2e4."))),(0,r.kt)("h3",{id:"\uac04\ub2e8\ud55c-\ucf54\ub4dc-\uc2dc\uac04-\ube44\uad50"},"\uac04\ub2e8\ud55c \ucf54\ub4dc \uc2dc\uac04 \ube44\uad50"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"list comprehensiion\uacfc unpacking",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"unpacking \ubc29\ubc95\uc774 \ub354 \ube60\ub984")))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"list comprehensiion and unpacking",src:t(5321).Z,width:"532",height:"227"})),(0,r.kt)("h3",{id:"code-profiling"},"Code profiling"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud504\ub85c\uadf8\ub7a8\uc758 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4, \uacf5\uac04 \ubcf5\uc7a1\ub3c4, \ud568\uc218 \ud638\ucd9c \uc8fc\uae30, \ube48\ub3c4 \ub4f1\uc744 \uce21\uc815\ud558\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \uae30\uc220"),(0,r.kt)("li",{parentName:"ul"},"\ud55c \uc904\uc529 \ubd84\uc11d"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"line_profiler")," package \uc0ac\uc6a9"),(0,r.kt)("li",{parentName:"ul"},"\uc124\uce58")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pip install line_profiler\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"extension loading ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"%load_ext line_profiler\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"magic command \uc0ac\uc6a9 ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uac1c\ubcc4 \ucf54\ub4dc \uc904\uc5d0 \ub300\ud55c \ub7f0\ud0c0\uc784 \uc218\uc9d1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-f"),": function name argument")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"%lprun -f convert_units convert_units(heroes, hts, wts)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\uacb0\uacfc")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Timer unit: 1e-06 s\n\nTotal time: 0.000194 s\nFile: <ipython-input-15-0ea9949fa4c4>\nFunction: convert_units at line 1\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     1                                           def convert_units(heroes, heights, weights):\n     2         1        169.0    169.0     87.1    new_hts = [ht * 0.39370 for ht in heights]\n     3         1          8.0      8.0      4.1    new_wts = [wt * 2.20462 for wt in weights]\n     4         1          2.0      2.0      1.0    hero_data = {}\n     5         4          8.0      2.0      4.1    for i,hero in enumerate(heroes):\n     6         3          6.0      2.0      3.1      hero_data[hero] = (new_hts[i], new_wts[i])\n     7         1          1.0      1.0      0.5    return hero_data\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"%timeit\ub294 \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uad6c\ud558\uae30 \uc704\ud574 \ubc18\ubcf5\ud558\uae30 \ub54c\ubb38\uc5d0 line_profiler\uc640 \uc2e4\ud589 \uc2dc\uac04\uc774 \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4.")),(0,r.kt)("h3",{id:"\uac1d\uccb4-\ud06c\uae30"},"\uac1d\uccb4 \ud06c\uae30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import sys\n\nnums_lsit = [*range(1000)]\nsys.getsizeof(nums_list)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\n\nnums_lsit = np.array(range(1000))\nsys.getsizeof(nums_list)\n")),(0,r.kt)("h3",{id:"\uba54\ubaa8\ub9ac-\uc0ac\uc6a9\ub7c9"},"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"memory_profiler")," \uc0ac\uc6a9",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\uac00 import\ub418\uc5b4 \uc788\uc5b4\uc57c \ud568",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. hero_funcs.py")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pip install memory_profiler\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from hero_funcs import convert_units\n\n%load_ext memory_profiler\n\n%mprun -f convert_units convert_units(heroes, hts, wts)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"memroy_profiler\ub294 \uc6b4\uc601\uccb4\uc81c\uc758 \uc815\ubcf4\ub97c \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\uac00 \uc2e4\uc81c\ub85c \uc0ac\uc6a9\ud558\ub294 \uba54\ubaa8\ub9ac \uc591\uacfc \ub2e4\ub97c \uc218 \uc788\ub2e4.")),(0,r.kt)("h2",{id:"gaining-efficiencies"},"Gaining efficiencies"),(0,r.kt)("h3",{id:"zip"},"zip"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"iterable \uac1d\uccb4\ub97c \uc778\uc790\ub85c \ubc1b\uc544 tuple\uc758 \ud615\ud0dc\ub85c \uc811\uadfc\ud560 \uc218 \uc788\ub294 iterator \ubc18\ud658")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"names = ['Bulbasaur', 'Charmander', 'Squirtle']\nhps = [45, 39, 44]\n\ncombined_zip = zip(names, hps)\ncombined_zip_list = [*combined_zip]\nprint(combined_zip_list)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[('Bulbasaur', 45), ('Charmander', 39), ('Squirtle', 44)]\n")),(0,r.kt)("h3",{id:"the-collections-module"},"The collections module"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python Standard Library",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"built-in module"))),(0,r.kt)("li",{parentName:"ul"},"\ud2b9\uc218\ud55c \ub370\uc774\ud130 \ud0c0\uc785\ub4e4\uc774 \uc788\uc74c",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"dict, list, set, tuple \ub300\uc2e0 \uc0ac\uc6a9"))),(0,r.kt)("li",{parentName:"ul"},"Counter",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ub8e8\ud504\uac00 \ud544\uc694 \uc5c6\uc74c"),(0,r.kt)("li",{parentName:"ul"},"key-value \ud615\ud0dc\ub85c \ucd9c\ub825"),(0,r.kt)("li",{parentName:"ul"},"\uac00\uc7a5 \ub192\uc740 \uc218\uc5d0\uc11c \uac00\uc7a5 \ub0ae\uc740 \uc218\ub85c \uc815\ub82c")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\npoke_types = ['Grass', 'Dark', 'Fire', ...]\ntype_counts = Counter(\n")))),(0,r.kt)("h3",{id:"the-itertools-module"},"The itertools module"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python Standard Library",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"built-in module"))),(0,r.kt)("li",{parentName:"ul"},"iterator\ub97c \ub9cc\ub4e4\uac70\ub098 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud234"),(0,r.kt)("li",{parentName:"ul"},"combinations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uc870\ud569")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from itertools import combinations\n\npoke_tpyes = ['Grass', 'Dark', 'Fire', 'Fries','Ghost']\ncombos_obj = combinations(pokr_types, 2)\nprint([*combos_obj])\n")),(0,r.kt)("h3",{id:"set"},"Set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_a = ['Bulbasaur', 'Charmander', 'Squirtle']\nlist_b = ['Caterpie', 'Pidgey', 'Squirtle']\n\nset_a = set(list_a)\n\nset_b = set(list_b)\n\nprint(set_a.intersection(set_b)) # a & b(and)\nprint(set_a.union(set_b)) # set_a | set_b(or)\nprint(set_a.symmetric_difference(set_b)) # a ^ b(xor)\nprint(set_a.difference(set_b)) # a - b\nprint(set_b.difference(set_a)) # b - a\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"%timeit\uc744 \uc0ac\uc6a9\ud558\uc5ec runtime\uc744 \uce21\uc815\ud588\uc744 \ub54c list, tuple, set \uc911 set\uc774 \uac00\uc7a5 \ube60\ub984"),(0,r.kt)("li",{parentName:"ul"},"set\uc740 list\uc640 \ub2e4\ub974\uac8c \uc6d0\uc18c\uac00 \uc911\ubcf5\ub418\uc9c0 \uc54a\uc74c")),(0,r.kt)("h3",{id:"\ub8e8\ud504-\uc81c\uac70"},"\ub8e8\ud504 \uc81c\uac70"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub824\uba74 \uac00\ub2a5\ud558\uba74 \ub8e8\ud504\ub294 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"The Zen of Python",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Flat is better than nested"))),(0,r.kt)("li",{parentName:"ul"},"\uc77c\ubc18\uc801\uc778 for\ubb38\ubcf4\ub2e4 list comprehension\uc774 \ub354 \ube60\ub974\uace0 \uadf8\uac83\ubcf4\ub2e4 map\uc744 \uc0ac\uc6a9\ud558\uc5ec unpacking\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub974\ub2e4.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# List of HP, Attack, Defense, Speed\npoke_stats = [\n[90, 92, 75, 60],\n[25, 20, 15, 90],\n[65, 130, 60, 75],\n...\n]\n# For loop approach\ntotals = []\nfor row in poke_stats:\n    totals.append(sum(row))\n# List comprehension\ntotals_comp = [sum(row) for row in poke_stats]\n# Built-in map() function\ntotals_map = [*map(sum, poke_stats)]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NumPy \uc0ac\uc6a9, built-in module\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc911\ubcf5\uc740 \ucd5c\ub300\ud55c \uc81c\uac70\ud558\uc790.")),(0,r.kt)("h3",{id:"\ub8e8\ud504\ub97c-\ud6a8\uc728\uc801\uc73c\ub85c-\ub9cc\ub4dc\ub294-\ubc29\ubc95"},"\ub8e8\ud504\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ub8e8\ud504 \ub0b4\uc5d0\uc11c \uc218\ud589\ub418\ub294 \ubc29\ubc95\uc744 \ubd84\uc11d",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ubd88\ud544\uc694\ud558\uac8c \uacc4\uc18d \ubc18\ubcf5\ub418\ub294 \ucf54\ub4dc\ub294 \ub8e8\ud504 \uc678\ub85c \ube7c\uc790."),(0,r.kt)("li",{parentName:"ul"},"\ud55c \ubc88\uc5d0 \uacb0\uacfc \uac12\uc744 \ubcc0\ud658\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc73c\uba74 \ub8e8\ud504 \ubc16\uc5d0\uc11c \uc9c4\ud589\ud558\uc790.")))),(0,r.kt)("h2",{id:"basic-pandas-optimizations"},"Basic pandas optimizations"),(0,r.kt)("h3",{id:"pandas-\ub2e4\uc2dc-\uc815\ub9ac"},"pandas \ub2e4\uc2dc \uc815\ub9ac"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac"),(0,r.kt)("li",{parentName:"ul"},"DataFrame",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"lable\uc774 \uc788\ub294 row\uc640 column\uc73c\ub85c \uad6c\uc131\ub41c tabular data")))),(0,r.kt)("h3",{id:"\uc0c8\ub85c\uc6b4-\uc5f4-\ub9cc\ub4e4\uae30"},"\uc0c8\ub85c\uc6b4 \uc5f4 \ub9cc\ub4e4\uae30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\n\nbaseball_df = pd.read_csv('baseball_stats.csv')\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud55c \uc2dc\uc98c \ub3d9\uc548 \uac01 \ud300\uc758 \uc2b9\ub960\uc744 \uc800\uc7a5\ud558\ub294 column \ub9cc\ub4e4\uae30"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"row\ub97c \ubc18\ubcf5\ud558\uace0 \ud568\uc218\ub97c \uc801\uc6a9\ud574\uc57c \ud568"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"iloc()\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"win_perc_list = []\nfor i in range(len(baseball_df)):\n    row = baseball_df.iloc[i]\n    wins = row['W']\n    games_played = row['G']\n    win_perc = calc_win_perc(wins, games_played)\n    win_perc_list.append(win_perc)\nbaseball_df['WP'] = win_perc_list\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"iterrows()\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"win_perc_list = []\nfor i,row in baseball_df.iterrows():\n    wins = row['W']\n    games_played = row['G']\n    win_perc = calc_win_perc(wins, games_played)\n    win_perc_list.append(win_perc)\nbaseball_df['WP'] = win_perc_list\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"runtime\uc744 \ube44\uad50\ud558\uba74 ",(0,r.kt)("inlineCode",{parentName:"p"},"iloc()"),"\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\ubcf4\ub2e4 ",(0,r.kt)("inlineCode",{parentName:"p"},"iterrows()"),"\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc774 \ub354 \ube60\ub974\ub2e4."))),(0,r.kt)("h3",{id:"itertuples"},"itertuples()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DataFrame\uc758 row\ub97c collections \ubaa8\ub4c8\uc758 namedtuple\uc774\ub77c\ub294 \uc790\ub8cc\ud615\uc73c\ub85c \ubc18\ud658"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"iterrows()"),"\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\ubcf4\ub2e4 ",(0,r.kt)("inlineCode",{parentName:"li"},"itertuples()"),"\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc774 \ub354 \ube60\ub974\ub2e4.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"for row_tuple in team_wins_df.iterrows():\n    print(row_tuple)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"for row_namedtuple `in t`eam_wins_df.`itertuples()`:\n    print(row_namedtuple)\n")),(0,r.kt)("h3",{id:"apply"},"apply()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\uc815\uc758\ud55c \ud568\uc218\uc5d0 \ub530\ub77c \ub370\uc774\ud130\ud504\ub808\uc784\uc774\ub098 \ud2b9\uc815 column \uac12\ub4e4\uc744 \uc77c\uad04\uc801\uc73c\ub85c \ubcc0\uacbd\ud560 \ub54c \uc0ac\uc6a9"),(0,r.kt)("li",{parentName:"ul"},"\ub8e8\ud504\ub97c \uc774\uc6a9\ud55c \ubc29\ubc95",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"run_diffs_iterrows = []\nfor i,row in baseball_df.iterrows():\n    run_diff = calc_run_diff(row['RS'], row['RA'])\n    run_diffs_iterrows.append(run_diff)\nbaseball_df['RD'] = run_diffs_iterrows\nprint(baseball_df)\n"))),(0,r.kt)("li",{parentName:"ul"},"apply()\ub97c \uc774\uc6a9\ud55c \ubc29\ubc95",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"lambda\uc640 \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc74c"),(0,r.kt)("li",{parentName:"ul"},"\ud14c\uc774\ube14 \ud615\uc2dd \ub370\uc774\ud130\ub85c \uc791\uc5c5\ud558\uae30 \ub54c\ubb38\uc5d0 \ud568\uc218\uac00 \uc791\ub3d9\ud560 \ucd95\uc744 \uc9c0\uc815"),(0,r.kt)("li",{parentName:"ul"},"axis",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"0: column"),(0,r.kt)("li",{parentName:"ul"},"1: row")))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"run_diffs_apply = baseball_df.apply(\n    lambda row: calc_run_diff(row['RS'], row['RA']), axis=1)\nbaseball_df['RD'] = run_diffs_apply\nprint(baseball_df)\n"))),(0,r.kt)("li",{parentName:"ul"},"\ub2e8\uc21c\ud788 \ub8e8\ud504\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\ubcf4\ub2e4 apply\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc774 \ub354 \ube60\ub974\ub2e4.")),(0,r.kt)("h3",{id:"\ube0c\ub85c\ub4dc-\uce90\uc2a4\ud305-\uc0ac\uc6a9"},"\ube0c\ub85c\ub4dc \uce90\uc2a4\ud305 \uc0ac\uc6a9"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"pandas\ub294 NumPy\uc5d0 \uad6c\ucd95\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"pandas\uc758 DataFrame\uc740 NumPy array\ucc98\ub7fc \ud6a8\uc728\uc801\uc73c\ub85c \ud65c\uc6a9 \uac00\ub2a5",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ube0c\ub85c\ub4dc \uce90\uc2a4\ud305 \uc0ac\uc6a9"),(0,r.kt)("li",{parentName:"ul"},"\uc704\uc758 \ubc29\ubc95\ubcf4\ub2e4 \ud6e8 \ube60\ub984")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"run_diffs_np = baseball_df['RS'].values - baseball_df['RA'].values\nbaseball_df['RD'] = run_diffs_np\nprint(baseball_df)\n")),(0,r.kt)("h1",{id:"writing-functions-in-python"},"Writing Functions in Python"),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("h3",{id:"docstring"},"Docstring"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\uc758 \uae30\ub2a5, \uc778\uc218, \ubc18\ud658 \uac12, \ubc1c\uc0dd\ud558\ub294 \uc624\ub958\uc5d0 \ub300\ud55c \uc815\ubcf4, \ud568\uc218\uc5d0 \ub300\ud574 \uc124\uba85\ud558\uace0 \uc2f6\uc740 \uc815\ubcf4 \ub4f1 \ud45c\uae30"),(0,r.kt)("li",{parentName:"ul"},"format style",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Google Style"),(0,r.kt)("li",{parentName:"ul"},"Numpydoc"),(0,r.kt)("li",{parentName:"ul"},"reStructuredText"),(0,r.kt)("li",{parentName:"ul"},"EpyText")))),(0,r.kt)("h3",{id:"google-style"},"Google Style"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def function(arg_1, arg_2=42):\n  """Description of what the function does.\n      \n  Args:\n    arg_1 (str): Description of arg_1 that can break onto the next line if needed.\n    arg_2 (int, optional): Write optional when an argument has a default value.\n\n  Returns:\n    bool: Optional description of the return value\n    Extra lines are not indented.\n\n  Raises:\n    ValueError: Include any error types that the function intentionally raises.\n\n  Notes:\n    See https://www.datacamp.com/community/tutorials/docstrings-python for more info.\n  """\n')),(0,r.kt)("h3",{id:"numpydoc"},"Numpydoc"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def function(arg_1, arg_2=42):\n  """\n  Description of what the function does.\n\n  Parameters\n  ----------\n  arg_1 : expected type of arg_1\n    Description of arg_1.\n  arg_2 : int, optional\n    Write optional when an argument has a default value.\n    Default=42.\n\n  Returns\n  -------\n  The type of the return value\n    Can include a description of the return value.\n    Replace "Returns" with "Yields" if this function is a generator.\n  """\n')),(0,r.kt)("h3",{id:"docstring-\ubc1b\uae30"},"docstring \ubc1b\uae30"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__doc__")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"inspect"),"\uc758 ",(0,r.kt)("inlineCode",{parentName:"li"},"getdoc()")," \uc0ac\uc6a9",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uc5bb\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub418\ub294 \uc720\uc6a9\ud55c \ud568\uc218\ub97c \uc81c\uacf5")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def the_answer():\n  """Return the answer to life,\n  the universe, and everything.\n  Returns:\n    int\n  """\nreturn 42\n\nprint(the_answer.__doc__)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import inspect\n\nprint(inspect.getdoc(the_answer))\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__doc__"),"\uc640 ",(0,r.kt)("inlineCode",{parentName:"li"},"getdoc()"),"\uc758 \ucc28\uc774\uc810",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__doc__"),"\ub294 \uc2dc\uac01\uc801\uc73c\ub85c \ubcf4\uae30 \uc88b\uac8c \uacf5\ubc31\uc774 \ud3ec\ud568\ub418\uc5b4 \uc815\ub82c\ub418\uc9c0\ub9cc ",(0,r.kt)("inlineCode",{parentName:"li"},"getdoc()"),"\ub294 \uacf5\ubc31\uc774 \uc81c\uac70\ub418\uc5b4 \uc67c\ucabd\uc5d0 \ubd99\uc5b4\uc11c \ub098\uc628\ub2e4.")))),(0,r.kt)("h3",{id:"dry-and-do-one-thing"},'DRY and "Do One Thing"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DRY(Don't repeat yourself)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uc911\ubcf5\ub418\ub294 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc790. -> \ubcf5\uc0ac, \ubd99\uc5ec\ub123\uae30 \ud558\uc9c0 \ub9d0\uc790."),(0,r.kt)("li",{parentName:"ul"},"\ubc1c\uacac\ud558\uae30 \uc5b4\ub824\uc6b4 \uc5d0\ub7ec\ub97c \uc6b0\uc5f0\ud788 \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc27d\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uba74 \uc5ec\ub7ec \uacf3\uc744 \uc218\uc815\ud574\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ubc18\ubcf5\ub418\ub294 \ucf54\ub4dc\ub294 ",(0,r.kt)("inlineCode",{parentName:"li"},"\ud568\uc218"),"\ub97c \uc0ac\uc6a9\ud574\ub77c."))),(0,r.kt)("li",{parentName:"ul"},"Do One Thing",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ud558\ub098\uc758 \uc77c\ub9cc \uc788\uc73c\uba74 \ub41c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\ub97c \ucabc\uac24 \uc218 \uc788\uc73c\uba74 \ucabc\uac1c\ub294 \uac83\uc774 \uc88b\ub2e4."))),(0,r.kt)("li",{parentName:"ul"},"\uc774\uc810",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ub354 \uc720\uc5f0\ud574\uc9c4\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub2e4\ub978 \uac1c\ubc1c\uc790\uac00 \uc774\ud574\ud558\uae30 \uc27d\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ud14c\uc2a4\ud2b8\uc640 \ub514\ubc84\uae45\uc774 \ub354 \uac04\ub2e8\ud574\uc9c4\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ucf54\ub4dc\ub97c \uc5c5\ub370\uc774\ud2b8\ud574\uc57c \ud558\ub294 \uacbd\uc6b0 \ubcc0\uacbd\uc774 \uc26c\uc6cc\uc9c4\ub2e4."))),(0,r.kt)("li",{parentName:"ul"},"code smell",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ucf54\ub4dc\uc5d0\uc11c \ubb38\uc81c\ub97c \ub354 \uc77c\uc73c\ud0ac \uac00\ub2a5\uc131\uc774 \uc788\ub294 \ucf54\ub4dc\uc758 \ud2b9\uc9d5"),(0,r.kt)("li",{parentName:"ul"},"refactoring\uc774 \ud544\uc694")))),(0,r.kt)("h3",{id:"pass-by-assignment"},"Pass by assignment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"immutable object\ub294 call by value",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def foo(x):\n  x[0] = 99\nmy_list = [1, 2, 3]\nfoo(my_list)\nprint(my_list) # [99, 2, 3]\n"))),(0,r.kt)("li",{parentName:"ul"},"mutable object\ub294 call by reference",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def bar(x):\n  x = x + 90\nmy_list = 3\nbar(my_list)\nprint(my_list) # 3\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uac12\uc774 \uacc4\uc18d \ubcc0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ud568\uc218\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc0ac\uc6a9\ud574\uc57c \ud560 \ub54c \ud568\uc218\uc758 argument\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc870\uc2ec\ud558\uc790.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def foo(var=[]):\n  var.append(1)\n  return var\nfoo() # [1]\nfoo() # [1, 1]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def foo(var=None):\n  if var is None:\n    var = []\n  var.append(1)\n  return var\nfoo() # [1]\nfoo() # [1]\n")))))),(0,r.kt)("h2",{id:"context-managers"},"Context Managers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\uc6d0\ud558\ub294 \ud0c0\uc774\ubc0d\uc5d0 \uc815\ud655\ud558\uac8c \ub9ac\uc18c\uc2a4\ub97c \ud560\ub2f9\ud558\uace0 \uc81c\uacf5\ud558\ub294 \uc5ed\ud560")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"with \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub294 example"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"open()\uc73c\ub85c \ud655\uc778\ub9cc \ud558\uc5ec close()\ub97c \ud638\ucd9c\ud558\uc9c0 \uc54a\uc544\ub3c4 \ud30c\uc77c\uc744 \ub2eb\uc744 \uc218 \uc788\uc74c")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"with open('my_file.txt) as my_file:\n  test = my_file.read()\n  length = len(text)\n\nprint('The file is {} characters long'.format(length))\n")))),(0,r.kt)("h3",{id:"context-manager\ub97c-\uc791\uc131\ud558\ub294-\ubc29\ubc95"},"context manager\ub97c \uc791\uc131\ud558\ub294 \ubc29\ubc95"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Class-based -> magic method \uc0ac\uc6a9",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. ",(0,r.kt)("strong",{parentName:"li"},"enter"),"(), ",(0,r.kt)("strong",{parentName:"li"},"exit"),"()"))),(0,r.kt)("li",{parentName:"ul"},"Function-based -> decorator \uc0ac\uc6a9",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Define a function."),(0,r.kt)("li",{parentName:"ol"},"(optional) Add any set up code your context needs."),(0,r.kt)("li",{parentName:"ol"},'Use the "yield" keyword -> \ud2b9\ubcc4\ud55c \uc885\ub958\uc758 \ud568\uc218\uc784\uc744 \ud30c\uc774\uc36c\uc5d0\uac8c \uc54c\ub9b0\ub2e4.'),(0,r.kt)("li",{parentName:"ol"},"(optional) Add any teardown code your context needs."),(0,r.kt)("li",{parentName:"ol"},"Add the ",(0,r.kt)("inlineCode",{parentName:"li"},"@contextlib.contextmanager")," decorator.")))),(0,r.kt)("h3",{id:"yield"},"yield"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"generator",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"iterator\ub97c \uc0dd\uc131\ud574\uc8fc\ub294 \ud568\uc218"),(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218 \ub0b4\ubd80\uc5d0 yeild \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9"))),(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218 \uc548\uc5d0\uc11c yield\ub97c \uc0ac\uc6a9\ud558\uba74 \ud568\uc218\ub294 generator\uac00 \ub418\uba70 yield\uc5d0\ub294 \uac12(\ubcc0\uc218)\uc744 \uc9c0\uc815\ud55c\ub2e4.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@contextlib.contextmanager\ndef my_context():\n  print('hello')\n  yield 42\n  print('goodbye)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"with my_context() as foo:\n  print('foo is {}'.format(foo))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hello\nfoo is 42\ngoodbye\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub3c4 \uc27d\uac8c \uc0ac\uc6a9 \uac00\ub2a5"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@contextlib.contextmanager\ndef database(url):\n  # set up database connection\n  db = postgres.connect(url)\n  yield db\n  # tear down database connection\n  db.disconnect()\n\nurl = \"http://datacamp.com/data\"\nwith database(url) as my_db:\n    course_list = my_db.execute(\n    'SELECT * FROM courses'\n    )\n")))),(0,r.kt)("h3",{id:"nested-contexts"},"Nested contexts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud30c\uc77c\uc774 \ub108\ubb34 \ucee4\uc11c \ubcf5\uc0ac\ud558\uae30 \ud798\ub4e0 \uc0c1\ud669\uc5d0\ub3c4 \ub05d\uae4c\uc9c0 \uc791\ub3d9\ud560 \uc218 \uc788\ub2e4."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def copy(src, dst):\n  """Copy the contents of one file to another.\n  Args:\n  src (str): File name of the file to be copied.\n  dst (str): Where to write the new file.\n  """\n  # Open the source file and read in the contents\n  with open(src) as f_src:\n    contents = f_src.read()\n  # Open the destination file and write out the contents\n  with open(dst, \'w\') as f_dst:\n    f_dst.write(contents)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud30c\uc77c \ud06c\uae30\uc5d0 \ub300\ud55c \uac71\uc815 \uc5c6\uc774 \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud560 \uc218 \uc788\ub2e4."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"context \ub0b4\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\ub294 f_src\uc640 f_dst \ud30c\uc77c \uac1d\uccb4 \ubaa8\ub450\uc5d0 \uc5d1\uc138\uc2a4\ud560 \uc218 \uc788\ub2e4. -> \ud55c \uc904\ub85c \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud560 \uc218 \uc788\ub2e4.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def copy(src, dst):\n  """Copy the contents of one file to another.\n  Args:\n  src (str): File name of the file to be copied.\n  dst (str): Where to write the new file.\n  """\n  # Open both files\n  with open(src) as f_src:\n    with open(dst, \'w\') as f_dst:\n      # Read and write each line, one at a time\n      for line in f_src:\n        f_dst.write(line)\n')))),(0,r.kt)("h3",{id:"handling-errors"},"Handling errors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ucf54\ub4dc\uac00 \ubcf5\uc7a1\ud574\uc9c0\uba74 \ud30c\uc77c\uc744 \ub2eb\uae30\uc804\uc5d0 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"try"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"except"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"try"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc5d0\ub7ec \ud578\ub4e4\ub9c1 \ud544\uc694"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"try:\n  # \uc2e4\ud589\ud560 \ucf54\ub4dc\nexcept:\n  # \uc608\uc678\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c \ucc98\ub9ac\ud558\ub294 \ucf54\ub4dc\nfinally:\n  # \uc608\uc678 \ubc1c\uc0dd \uc5ec\ubd80\uc640 \uc0c1\uad00\uc5c6\uc774 \ud56d\uc0c1 \uc2e4\ud589\ud560 \ucf54\ub4dc\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_printer(ip):\n  p = connect_to_printer(ip)\n\n  try:\n    yield\n  finally:\n    p.disconnect()\n    print('disconnected from printer')\n\ndoc = {'text': 'This is my text.'}\n\nwith get_printer('10.0.34.111') as printer:\n  printer.print_page(doc['txt'])\n")))))),(0,r.kt)("h2",{id:"decorators"},"Decorators"),(0,r.kt)("h3",{id:"functions-as-variables"},"Functions as variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\uc77c\uae09 \uac1d\uccb4(first-class object)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ubcc0\uc218\ub098 \uc790\ub8cc\uad6c\uc870\uc5d0 \ub123\uc744 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc804\ub2ec\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"return \uac12\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. "))),(0,r.kt)("li",{parentName:"ul"},"\uc77c\uae09 \ud568\uc218(first-class function)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uc77c\uae09 \uac1d\uccb4\uc758 \uc870\uac74\uc744 \ub9cc\uc871"),(0,r.kt)("li",{parentName:"ul"},"run-time\uc5d0 \ud568\uc218\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4."))),(0,r.kt)("li",{parentName:"ul"},"\ud30c\uc774\uc36c\ub3c4 def\uc548\uc5d0 def\ub97c \ub9cc\ub4e4\uac70\ub098 lambda\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc2e4\ud589 \uc911\uc5d0 \ud568\uc218\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc77c\uae09 \ud568\uc218\uc774\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ubcc0\uc218\uc5d0 \ud568\uc218\ub97c \ud560\ub2f9\ud560 \ub54c \ud568\uc218 \uc774\ub984 \ub4a4\uc5d0 \uad04\ud638\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294\ub2e4.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uad04\ud638 \uc5c6\uc774 \ud568\uc218 \uc774\ub984\uc744 \uc785\ub825\ud558\ub294 \uac83\uc740 \ud568\uc218 \uc790\uccb4\ub97c \ucc38\uc870\ud558\ub294 \uac83 -> \ud568\uc218 \uac1d\uccb4")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def my_function():\n  print('Hello')\nx = my_function\ntype(x) # <type 'fucntion'>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x() # Hello\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"PrintyMcPrintface = print\nPrintyMcPrintface('Python is awesome!') # Python is awesome!\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_of_functions = [my_function, open, print]\nlist_of_functions[2]('I am printing with an element of a list')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dict_of_functions = {\n    'func1' : my_function,\n    'func2' : open,\n    'func3' : print\n}\ndict_of_functions['func3']('I am printing with a value of dict!')\n")),(0,r.kt)("h3",{id:"functions-as-arguments"},"Functions as arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud568\uc218\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \uac1d\uccb4\uc774\ubbc0\ub85c \ub2e4\ub978 \ud568\uc218\uc758 \uc778\uc790\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def has_docstring(func):\n    """Check to see if the function\n    \'func\' has a docstring.\n\n    Args:\n        func (callable): A function.\n    \n    Returns:\n        bool\n    """\n    return func.__doc__ is not None\n\ndef no():\n    return 42\n\ndef yes():\n    """Return the value 42\n    """\n    return 42\n\nhas_docstring(no) # False\n')))),(0,r.kt)("h3",{id:"\ub2e4\ub978-\ud568\uc218-\ub0b4\uc5d0\uc11c-\uc815\uc758\ud558\uae30"},"\ub2e4\ub978 \ud568\uc218 \ub0b4\uc5d0\uc11c \uc815\uc758\ud558\uae30"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if\ubb38\uc774 \uae38\uc5b4\uc11c \ucf54\ub4dc\ub97c \uc77d\uae30 \ud798\ub4e0 \uc0c1\ud669"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def foo(x, y):\n    if x > 4 and x < 10 and y > 4 and y < 10:\n        print(x * y)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\uc774\ub807\uac8c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uba74 \uac00\ub3c5\uc131\uc774 \uc88b\ub2e4\uace0 \ud558\ub294\ub370 \uc194\uc9c1\ud788 \uc798 \ubaa8\ub974\uaca0\ub2e4."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def foo(x,y):\n    def in_range(v):\n        return v > 4 and v < 10\n\n    if in_range(x) and in_range(y):\n        print(x * y)\n")))),(0,r.kt)("h3",{id:"\ud568\uc218\ub97c-\ubc18\ud658-\uac12\uc73c\ub85c-\uc0ac\uc6a9\ud558\uae30"},"\ud568\uc218\ub97c \ubc18\ud658 \uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_function():\n    def print_me(s):\n        print(s)\n    return print_me\n\nnew_func = get_function()\nnew_func('This is a sentence.')\n")),(0,r.kt)("h3",{id:"scope"},"Scope"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud30c\uc774\uc36c interpreter\ub294 local -> nonlocal -> global -> builtin \uc21c\uc73c\ub85c \ucc3e\uc74c",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"nonlocal: \ud568\uc218\uac00 \uc911\ucca9\ub418\uc5b4 \uc788\uc744 \ub54c \uc790\uc2dd \ubc94\uc704\uac00 \uc544\ub2cc \ubd80\ubaa8 \ud568\uc218\uc758 \ubc94\uc704")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = 7\ny = 200\nprint(x) # 7\n\ndef foo():\n    x = 42\n    print(x) # 42\n    print(y) # 200\nfoo(x)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = 7\ndef foo():\n    global x\n    x = 42\n    print(x) # 42\nfoo()\nprint(x) # 42\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def foo():\n    x = 10\n    def bar():\n        nonlocal x\n        x = 200\n        print(x) # 200\n    bar()\n    print(x) # 200\nfoo()\n")),(0,r.kt)("h3",{id:"closure"},"Closure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\ub97c \ub458\ub7ec\uc2fc \ud658\uacbd(\uc9c0\uc5ed \ubcc0\uc218, \ucf54\ub4dc \ub4f1)\uc744 \uacc4\uc18d \uc720\uc9c0\ud558\ub2e4\uac00, \ud568\uc218\ub97c \ud638\ucd9c\ud560 \ub54c \ub2e4\uc2dc \uaebc\ub0b4\uc11c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def foo():\n    a = 5\n    def bar():\n        print(a)\n    return bar\n\nfunc = foo()\n\nprint(func()) # 5\nprint(type(func.__closure__)) # <class 'tuple'>\nprint(len(func.__closure__)) # 1\nprint(func.__closure__[0].cell_contents) # 5\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parent(arg_1, arg_2):\n    value = 22\n    my_dict = {'chocolate':'yummy'}\n    \n    def child():\n        print(2*value)\n        print(my_dict['chocolate'])\n        print(arg_1+arg_2)\n        \n    return child\n\nnew_function = parent(3,4)\nprint([cell.cell_contents for cell in new_function.__closure__]) # [3, 4, 22, {'chocolate': 'yummy'}]\n")),(0,r.kt)("h3",{id:"decorator"},"Decorator"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc5d0\uc11c \ucd94\uac00 \uae30\ub2a5\uc744 \uad6c\ud604\ud560 \ub54c \uc0ac\uc6a9"),(0,r.kt)("li",{parentName:"ul"},"\ud638\ucd9c\ud560 \ud568\uc218\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uace0 \ud638\ucd9c\ud560 \ud568\uc218\ub97c \uac10\uc2f8\ub294 wrapper \ud568\uc218\ub97c \ub9cc\ub4e0\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"wrapper \ud568\uc218 \uc548\uc5d0\uc11c\ub294 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 func\ub97c \ud638\ucd9c\ud558\uace0 \ud568\uc218 \ubc16\uc5d0\uc11c\ub294 return\uc744 \uc0ac\uc6a9\ud558\uc5ec wrapper \ud568\uc218 \uc790\uccb4\ub97c \ubc18\ud658")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def double_args(func):\n    # Define a new function that we can modify\n    def wrapper(a, b):\n        # For now, just call the unmodified function\n        return func(a * 2, b * 2)\n    return wrapper\n\ndef multiply(a, b):\n    return a * b\n\nmultiply = double_args(multiply)\nmultiply(1, 5) # 20\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def double_args(func):\n    def wrapper(a, b):\n        return func(a*2, b*2)\n    return wrapper\n\n@double_args\ndef multiply(a, b):\n  return a * b\n\nmultiply(1, 5) # 20\n")),(0,r.kt)("h2",{id:"more-on-decorators"},"More on Decorators"),(0,r.kt)("h3",{id:"timer"},"Timer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"decorating\ub41c \ud568\uc218\ub97c \uc2e4\ud589\ud55c \ub2e4\uc74c \ud568\uc218\uac00 \uc2e4\ud589\ub418\ub294\ub370 \uac78\ub9b0 \uc2dc\uac04 \ucd9c\ub825"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import time\n\ndef timer(func):\n    """A decorator that prints how long a function took to run."""\n    # Define the wrapper function to return.\n    def wrapper(*args, **kwargs):\n        # When wrapper() is called, get the current time.\n        t_start = time.time()\n        # Call the decorated function and store the result.\n        result = func(*args, **kwargs)\n        # Get the total time it took to run, and print it\n        t_total = time.time() - t_start\n        print(\'{} took {}s\'.format(func.__name__, t_total))\n        return result\n    return wrapper\n\n@timer\ndef sleep_n_seconds(n):\n    time.sleep(n)\n\nsleep_n_seconds(5)\n')))),(0,r.kt)("h3",{id:"memoize"},"Memoize"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\uc758 \uacb0\uacfc\ub97c \uc800\uc7a5\ud558\uc5ec \ub2e4\uc74c\uc5d0 \ud568\uc218\uac00 \ub3d9\uc77c\ud55c \uc778\uc218\ub85c \ud638\ucd9c\ub420 \ub54c \ubc18\ubcf5 \uc218\ud589\uc744 \uc81c\uac70\ud558\uc5ec \uc2e4\ud589 \uc18d\ub3c4\ub97c \ube60\ub974\uac8c \ud558\ub294 \uae30\uc220")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def memoize(func):\n    """Store the results of the decorated function for fast lookup\n    """\n    # Store results in a dict that maps arguments to results\n    cache = {}\n    # Define the wrapper function to return.\n    def wrapper(*args, **kwargs):\n        # If these arguments haven\'t been seen before,\n        if (args, kwargs) not in cache:\n        # Call func() and store the result.\n        cache[(args, kwargs)] = func(*args, **kwargs)\n        return cache[(args, kwargs)]\n    return wrapper\n\n@memoize\ndef slow_function(a, b):\n    print(\'Sleeping...\')\n    time.sleep(5)\n    return a + b\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"slow_function(3, 4)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Sleeping...\n7\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"slow_function(3, 4) # Sleeping...\uc774 \uc548 \ub098\uc624\uace0 \ubc14\ub85c 7\uc744 \ubc18\ud658\n")),(0,r.kt)("h3",{id:"decorators-and-metadata"},"Decorators and metadata"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ub370\ucf54\ub808\uc774\ud130\uc758 \ubb38\uc81c\uc810: \ub370\ucf54\ub808\uc774\ud130\uac00 \ub370\ucf54\ub808\uc774\ud305 \ub41c \ud568\uc218\uc758 \uba54\ud0c0 \ub370\uc774\ud130\ub97c \uac10\uc2f8\uc8fc\uae30(\ub36e\uae30) \ub54c\ubb38\uc5d0 \uc54c\ub9de\uac8c \ucd9c\ub825\uc774 \ub418\uc9c0 \uc54a\ub294\ub2e4."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@timer\ndef sleep_n_seconds(n=10):\n    """Pause processing for n seconds.\n\n    Args"\n        n (int): The number of seconds to pause for.\n    """\n    time.sleep(n)\nprint(sleep_n_seconds.__doc__) # \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc74c\nprint(sleep_n_seconds.__name__) # wrapper\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud574\uacb0"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"functools\uc758 wraps \uc0ac\uc6a9"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from functools import wraps\ndef timer(func):\n    """A decorator that print show how long a function took to run."""\n\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        t_start = time.time()\n\n        result = func(*args, **kwargs)\n        \n        t_total = time.time() - t_start\n        \n        print(\'{} took {}s\'.format(func.__name__, t_total))\n        \n        return result\n    return wrapper\n\n@timer\ndef sleep_n_seconds(n=10):\n    """Pause processing for n seconds.\n\n    Args"\n        n (int): The number of seconds to pause for.\n    """\n    time.sleep(n)\n\nprint(sleep_n_seconds.__doc__) # sleep_n_seconds\uc758 docstring\nprint(sleep_n_seconds.__name__) # sleep_n_seconds\nprint(sleep_n_seconds.__defaults__) # (10,)\nprint(sleep_n_seconds.__wrapped__) # closure\ub97c \ud1b5\ud574\uc11c\ub3c4 \uc811\uadfc\ud560 \uc218 \uc788\uc9c0\ub9cc \ub354 \uc811\uadfc\ud558\uae30 \uc26c\uc6b4 \ubc29\ubc95\n')))))),(0,r.kt)("h3",{id:"decorator\uc758-argument"},"decorator\uc758 argument"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ub370\ucf54\ub808\uc774\ud130\ub294 \ud558\ub098\uc758 \uc778\uc218\ub9cc \uc788\uc5b4\uc57c \ud55c\ub2e4.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ub370\ucf54\ub808\uc774\uc158\ud558\ub294 \uae30\ub2a5\ub9cc \ud544\uc694")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def run_n_times(n):\n    """Define and return a decorator"""\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for i in range(n):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ub3d9\uc77c\ud558\uac8c \uc791\ub3d9"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"run_three_times = run_n_times(3)\n@run_three_times\ndef print_sum(a,b):\n    print(a + b)\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@run_n_times(3)\ndef print_sum(a, b):\n    print(a + b)\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@run_n_times(5)\ndef print_hello():\n  print('Hello!')\n\nprint_sum(3, 5) # 8\uc774 3\ubc88 \ubc18\ubcf5 \ucd9c\ub825\nprint_sum(1, 3) # Hello!\uac00 5\ubc88 \ubc18\ubcf5 \ucd9c\ub825\n")),(0,r.kt)("h3",{id:"timeout"},"Timeout"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud568\uc218\uac00 \uc608\uc0c1\ubcf4\ub2e4 \uc624\ub798 \uc2e4\ud589\ub418\uba74 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ub370\ucf54\ub808\uc774\ud130")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import signal\n\ndef raise_timeout(*args, **kwargs):\n    raise TimeoutError()\n# When an "alarm" signal goes off, call raise_timeout()\nsignal.signal(signalnum = signal.SIGALRM, handler = raise_timeout)\n# Set off an alarm in 5 seconds\nsignal.alarm(5)\n# Cancel the alarm\nsignal.alarm(0)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def timeout(n_seconds):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Set an alarm for 5 seconds\n            signal.alarm(n_seconds)\n            try:\n                # Call the decorated func\n                return func(*args, **kwargs)\n            finally:\n                # Cancel alarm\n                signal.alarm(0)\n        return wrapper\n    return decorator\n\n@timeout(5)\ndef foo():\n    time.sleep(10)\n    print('foo!')\n\n@timeout(20)\ndef bar():\n    time.sleep(10)\n    print('bar!')\n\nfoo() # TimeoutError\nbar() # bar!\n")))}m.isMDXComponent=!0},5321:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/runtime1-87167982a3ee99aa50e739405ca109ec.jpg"}}]);