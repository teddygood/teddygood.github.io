"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[2479],{550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>a,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(4848),r=t(8453);const o={title:"LeetCode 26",date:"2024-09-21"},s=void 0,l={id:"Algorithm/LeetCode-26",title:"LeetCode 26",description:"26. Remove Duplicates from Sorted Array",source:"@site/wiki/Algorithm/LeetCode-26.md",sourceDirName:"Algorithm",slug:"/Algorithm/LeetCode-26",permalink:"/wiki/Algorithm/LeetCode-26",draft:!1,unlisted:!1,editUrl:"https://github.com/teddygood/teddygood.github.io/tree/main/wiki/Algorithm/LeetCode-26.md",tags:[],version:"current",frontMatter:{title:"LeetCode 26",date:"2024-09-21"},sidebar:"sidebar",previous:{title:"LeetCode 169",permalink:"/wiki/Algorithm/LeetCode-169"},next:{title:"LeetCode 27",permalink:"/wiki/Algorithm/LeetCode-27"}},d={},c=[{value:"26. Remove Duplicates from Sorted Array",id:"26-remove-duplicates-from-sorted-array",level:2},{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Time and Space Complexity",id:"time-and-space-complexity",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"26-remove-duplicates-from-sorted-array",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-duplicates-from-sorted-array/description",children:"26. Remove Duplicates from Sorted Array"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Clicking the heading will take you to the LeetCode problem."})}),"\n",(0,i.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,i.jsxs)(n.p,{children:["Given an integer array\xa0",(0,i.jsx)(n.code,{children:"nums"}),"\xa0sorted in\xa0",(0,i.jsx)(n.strong,{children:"non-decreasing order"}),", remove the duplicates\xa0",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/In-place_algorithm",children:(0,i.jsx)(n.strong,{children:"in-place"})}),"\xa0such that each unique element appears only\xa0",(0,i.jsx)(n.strong,{children:"once"}),". The\xa0",(0,i.jsx)(n.strong,{children:"relative order"}),"\xa0of the elements should be kept the\xa0",(0,i.jsx)(n.strong,{children:"same"}),". Then return\xa0",(0,i.jsx)(n.em,{children:"the number of unique elements in"}),"\xa0",(0,i.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Consider the number of unique elements of\xa0",(0,i.jsx)(n.code,{children:"nums"}),"\xa0to be\xa0",(0,i.jsx)(n.code,{children:"k"}),", to get accepted, you need to do the following things:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Change the array\xa0",(0,i.jsx)(n.code,{children:"nums"}),"\xa0such that the first\xa0",(0,i.jsx)(n.code,{children:"k"}),"\xa0elements of\xa0",(0,i.jsx)(n.code,{children:"nums"}),"\xa0contain the unique elements in the order they were present in\xa0",(0,i.jsx)(n.code,{children:"nums"}),"\xa0initially. The remaining elements of\xa0",(0,i.jsx)(n.code,{children:"nums"}),"\xa0are not important as well as the size of\xa0",(0,i.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Return\xa0",(0,i.jsx)(n.code,{children:"k"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Custom Judge:"})}),"\n",(0,i.jsx)(n.p,{children:"The judge will test your solution with the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"int[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If all assertions pass, then your solution will be\xa0",(0,i.jsx)(n.strong,{children:"accepted"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"**Input:** nums = [1,1,2]\n**Output:** 2, nums = [1,2,_]\n**Explanation:** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"**Input:** nums = [0,0,1,1,1,2,2,3,3,4]\n**Output:** 5, nums = [0,1,2,3,4,_,_,_,_,_]\n**Explanation:** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= nums.length <= 3 * 104"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"-100 <= nums[i] <= 100"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"nums"}),"\xa0is sorted in\xa0",(0,i.jsx)(n.strong,{children:"non-decreasing"}),"\xa0order."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \n        # Pointer to track the position of the unique elements\n        i = 0\n\n        # Iterate through the array starting from the second element\n        for j in range(1, len(nums)):\n            # If current element is different from the last unique element\n            if nums[j] != nums[i]:\n                # Move the pointer i forward and replace the next position with nums[j]\n                i += 1\n                nums[i] = nums[j]\n                \n        # Return the length of the array with unique elements\n        return i + 1    \n"})}),"\n",(0,i.jsx)(n.h3,{id:"time-and-space-complexity",children:"Time and Space Complexity"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time complexity"}),": ",(0,i.jsx)(n.code,{children:"O(n)"}),", where ",(0,i.jsx)(n.code,{children:"n"})," is the length of the input array"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Space complexity"}),": ",(0,i.jsx)(n.code,{children:"O(1)"}),", since only a fixed number of pointers (",(0,i.jsx)(n.code,{children:"i"}),", ",(0,i.jsx)(n.code,{children:"j"}),") and no extra data structures are used (in-place modification)"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);