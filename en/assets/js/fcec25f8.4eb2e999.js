"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[6039],{4042:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var a=n(4848),r=n(8453);const t={title:"LeetCode 88",date:"2024-09-21",draft:!1},i=void 0,l={id:"Algorithm/LeetCode-88",title:"LeetCode 88",description:"88. Merge Sorted Array",source:"@site/wiki/Algorithm/LeetCode-88.md",sourceDirName:"Algorithm",slug:"/Algorithm/LeetCode-88",permalink:"/en/wiki/Algorithm/LeetCode-88",draft:!1,unlisted:!1,editUrl:"https://github.com/teddygood/teddygood.github.io/tree/main/wiki/Algorithm/LeetCode-88.md",tags:[],version:"current",frontMatter:{title:"LeetCode 88",date:"2024-09-21",draft:!1},sidebar:"sidebar",previous:{title:"LeetCode 27",permalink:"/en/wiki/Algorithm/LeetCode-27"},next:{title:"Hugo PaperMod theme \ud3f0\ud2b8 \ubcc0\uacbd",permalink:"/en/wiki/Blog/change-papermod-theme-font"}},m={},c=[{value:"88. Merge Sorted Array",id:"88-merge-sorted-array",level:2},{value:"Example",id:"example",level:3},{value:"Solution",id:"solution",level:3}];function h(e){const s={annotation:"annotation",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"88-merge-sorted-array",children:"88. Merge Sorted Array"}),"\n",(0,a.jsxs)(s.p,{children:["You are given two integer arrays ",(0,a.jsx)(s.code,{children:"nums1"})," and ",(0,a.jsx)(s.code,{children:"nums2"}),", sorted in ",(0,a.jsx)(s.strong,{children:"non-decreasing order"}),", and two integers ",(0,a.jsx)(s.code,{children:"m"})," and ",(0,a.jsx)(s.code,{children:"n"}),", representing the number of elements in ",(0,a.jsx)(s.code,{children:"nums1"})," and ",(0,a.jsx)(s.code,{children:"nums2"})," respectively."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Merge"})," ",(0,a.jsx)(s.code,{children:"nums1"})," and ",(0,a.jsx)(s.code,{children:"nums2"})," into a single array sorted in ",(0,a.jsx)(s.strong,{children:"non-decreasing order."})]}),"\n",(0,a.jsxs)(s.p,{children:["The final sorted array should not be returned by the function, but instead be stored inside the array ",(0,a.jsx)(s.code,{children:"nums1"}),". To accommodate this, ",(0,a.jsx)(s.code,{children:"nums1"})," has a length of ",(0,a.jsx)(s.code,{children:"m + n"}),", where the first ",(0,a.jsx)(s.code,{children:"m"})," elements denote the elements that should be merged, and the last ",(0,a.jsx)(s.code,{children:"n"})," elements are set to 0 and should be ignored. ",(0,a.jsx)(s.code,{children:"nums2"})," has a length of ",(0,a.jsx)(s.code,{children:"n"}),"."]}),"\n",(0,a.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Input:"})," nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Output:"})," [1,2,2,3,5,6]",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Explanation:"})," The arrays we are merging are [1,2,3] and [2,5,6].",(0,a.jsx)(s.br,{}),"\n","The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Input:"})," nums1 = [1], m = 1, nums2 = [], n = 0",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Output:"})," [1]",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Explanation:"})," The arrays we are merging are [1] and [].",(0,a.jsx)(s.br,{}),"\n","The result of the merge is [1]."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example 3:"})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Input:"})," nums1 = [0], m = 0, nums2 = [1], n = 1",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Output:"})," [1]",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Explanation:"})," The arrays we are merging are [] and [1].",(0,a.jsx)(s.br,{}),"\n","The result of the merge is [1].",(0,a.jsx)(s.br,{}),"\n","Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"nums1.length == m + n"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"nums2.length == n"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"0 <= m, n <= 200"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"1 <= m + n <= 200"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-10^9 <= nums1[i], nums2[j] <= 10^9"})}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Follow up: Can you come up with an algorithm that runs in ",(0,a.jsxs)(s.span,{className:"katex",children:[(0,a.jsx)(s.span,{className:"katex-mathml",children:(0,a.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(s.semantics,{children:[(0,a.jsxs)(s.mrow,{children:[(0,a.jsx)(s.mi,{children:"O"}),(0,a.jsx)(s.mo,{stretchy:"false",children:"("}),(0,a.jsx)(s.mi,{children:"m"}),(0,a.jsx)(s.mo,{children:"+"}),(0,a.jsx)(s.mi,{children:"n"}),(0,a.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(m + n)"})]})})}),(0,a.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(s.span,{className:"mopen",children:"("}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(s.span,{className:"mbin",children:"+"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(s.span,{className:"mclose",children:")"})]})]})]})," time?"]}),"\n",(0,a.jsx)(s.h3,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:'class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        """\n        Do not return anything, modify nums1 in-place instead.\n        """\n        # Initialize pointers for nums1, nums2, and the end of nums1\n        i, j, k = m - 1, n - 1, m + n - 1\n\n        # Traverse from the end of both arrays and the merge them\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        \n        # If any elements are left in nums2, copy them to nums1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            k -= 1\n            j -= 1\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Since both arrays are sorted, elements can be compared from the end and the merged array can be filled accordingly. Each element in ",(0,a.jsx)(s.code,{children:"nums1"})," and ",(0,a.jsx)(s.code,{children:"nums2"})," is compared at most once, resulting in a total of ",(0,a.jsxs)(s.span,{className:"katex",children:[(0,a.jsx)(s.span,{className:"katex-mathml",children:(0,a.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(s.semantics,{children:[(0,a.jsxs)(s.mrow,{children:[(0,a.jsx)(s.mi,{children:"O"}),(0,a.jsx)(s.mo,{stretchy:"false",children:"("}),(0,a.jsx)(s.mi,{children:"m"}),(0,a.jsx)(s.mo,{children:"+"}),(0,a.jsx)(s.mi,{children:"n"}),(0,a.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(m + n)"})]})})}),(0,a.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(s.span,{className:"mopen",children:"("}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(s.span,{className:"mbin",children:"+"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(s.span,{className:"mclose",children:")"})]})]})]})," comparisons. Therefore, the time overall time complexity is ",(0,a.jsxs)(s.span,{className:"katex",children:[(0,a.jsx)(s.span,{className:"katex-mathml",children:(0,a.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(s.semantics,{children:[(0,a.jsxs)(s.mrow,{children:[(0,a.jsx)(s.mi,{children:"O"}),(0,a.jsx)(s.mo,{stretchy:"false",children:"("}),(0,a.jsx)(s.mi,{children:"m"}),(0,a.jsx)(s.mo,{children:"+"}),(0,a.jsx)(s.mi,{children:"n"}),(0,a.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(m + n)"})]})})}),(0,a.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(s.span,{className:"mopen",children:"("}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(s.span,{className:"mbin",children:"+"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(s.span,{className:"mclose",children:")"})]})]})]}),". As the merge operation is performed in-place within ",(0,a.jsx)(s.code,{children:"nums1"}),", no additional space is required. Consequently, the space complexity is ",(0,a.jsxs)(s.span,{className:"katex",children:[(0,a.jsx)(s.span,{className:"katex-mathml",children:(0,a.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(s.semantics,{children:[(0,a.jsxs)(s.mrow,{children:[(0,a.jsx)(s.mi,{children:"O"}),(0,a.jsx)(s.mo,{stretchy:"false",children:"("}),(0,a.jsx)(s.mn,{children:"1"}),(0,a.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,a.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(s.span,{className:"mopen",children:"("}),(0,a.jsx)(s.span,{className:"mord",children:"1"}),(0,a.jsx)(s.span,{className:"mclose",children:")"})]})})]}),"."]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var a=n(6540);const r={},t=a.createContext(r);function i(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);