"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[2879],{2621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var r=t(4848),s=t(8453);const i={title:"LeetCode 49",date:"2025-06-26"},o=void 0,l={id:"Algorithm/LeetCode-49",title:"LeetCode 49",description:"49. Group Anagrams",source:"@site/wiki/Algorithm/LeetCode-49.md",sourceDirName:"Algorithm",slug:"/Algorithm/LeetCode-49",permalink:"/en/wiki/Algorithm/LeetCode-49",draft:!1,unlisted:!1,editUrl:"https://github.com/teddygood/teddygood.github.io/tree/main/wiki/Algorithm/LeetCode-49.md",tags:[],version:"current",frontMatter:{title:"LeetCode 49",date:"2025-06-26"},sidebar:"sidebar",previous:{title:"LeetCode 27",permalink:"/en/wiki/Algorithm/LeetCode-27"},next:{title:"LeetCode 58",permalink:"/en/wiki/Algorithm/LeetCode-58"}},d={},a=[{value:"49. Group Anagrams",id:"49-group-anagrams",level:2},{value:"Problem",id:"problem",level:2},{value:"Solution(Sorting based)",id:"solutionsorting-based",level:2},{value:"Time and Space Complexity",id:"time-and-space-complexity",level:3},{value:"Solution(word length count based)",id:"solutionword-length-count-based",level:2},{value:"Time and Space Complexity",id:"time-and-space-complexity-1",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"49-group-anagrams",children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/group-anagrams/description/",children:"49. Group Anagrams"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Clicking the heading will take you to the LeetCode problem."})}),"\n",(0,r.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,r.jsxs)(n.p,{children:["Given an array of strings\xa0",(0,r.jsx)(n.code,{children:"strs"}),", group the\xa0anagrams\xa0together. You can return the answer in\xa0",(0,r.jsx)(n.strong,{children:"any order"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'**Input:**\xa0strs = ["eat","tea","tan","ate","nat","bat"]\n\n**Output:**\xa0[["bat"],["nat","tan"],["ate","eat","tea"]]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["There is no string in strs that can be rearranged to form\xa0",(0,r.jsx)(n.code,{children:'"bat"'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The strings\xa0",(0,r.jsx)(n.code,{children:'"nat"'}),"\xa0and\xa0",(0,r.jsx)(n.code,{children:'"tan"'}),"\xa0are anagrams as they can be rearranged to form each other."]}),"\n",(0,r.jsxs)(n.li,{children:["The strings\xa0",(0,r.jsx)(n.code,{children:'"ate"'}),",\xa0",(0,r.jsx)(n.code,{children:'"eat"'}),", and\xa0",(0,r.jsx)(n.code,{children:'"tea"'}),"\xa0are anagrams as they can be rearranged to form each other."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'**Input:**\xa0strs = [""]\n\n**Output:**\xa0[[""]]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'**Input:**\xa0strs = ["a"]\n\n**Output:**\xa0[["a"]]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= strs.length <= 104"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= strs[i].length <= 100"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"strs[i]"}),"\xa0consists of lowercase English letters."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solutionsorting-based",children:"Solution(Sorting based)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        anagrams = collections.defaultdict(list)\n\n        for word in strs:\n            anagrams[''.join(sorted(word))].append(word)\n        return anagrams.values()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"time-and-space-complexity",children:"Time and Space Complexity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sorting a word"}),": ",(0,r.jsx)(n.code,{children:"O(k log k)"}),", where ",(0,r.jsx)(n.code,{children:"k"})," is the length of the word"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total time complexity"}),": ",(0,r.jsx)(n.code,{children:"O(n * k log k)"}),", where ",(0,r.jsx)(n.code,{children:"n"})," is the number of words in the input list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Space complexity"}),": ",(0,r.jsx)(n.code,{children:"O(n * k)"})," for storing the grouped anagrams in a hash map"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solutionword-length-count-based",children:"Solution(word length count based)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        anagrams = collections.defaultdict(list)\n\n        for word in strs:\n            count = [0] * 26 # a~z\n            for chat in word:\n                count[ord(char) - ord('a')] += 1\n\n            key = tuple(count) # List can't be keys, so convert to tuples\n            anagrams[key].append(word)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"time-and-space-complexity-1",children:"Time and Space Complexity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Counting letters in a word"})," takes ",(0,r.jsx)(n.code,{children:"O(k)"}),", where ",(0,r.jsx)(n.code,{children:"k"})," is the length of the word"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Total time complexity"})," is ",(0,r.jsx)(n.code,{children:"O(n * k)"}),", where ",(0,r.jsx)(n.code,{children:"n"})," is the number of words in the input list"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Space complexity"})," is ",(0,r.jsx)(n.code,{children:"O(n * k)"})," for storing the grouped anagrams in a hash map (",(0,r.jsx)(n.code,{children:"defaultdict"}),")"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);